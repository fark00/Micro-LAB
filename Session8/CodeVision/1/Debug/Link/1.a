;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 5/26/2021
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <font5x7.h>
;#include <math.h>
;
;// Graphic Display functions
;
;
;// Declare your global variables here
;const unsigned short FK[] = {
;        0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, // C ...
;        0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF,  //  ...
;        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E,  //  ...
;        0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD,  //  ...
;        0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB,  //  ...
;        0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7,  //  ...
;        0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,  //  ...
;        0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF,  //  ...
;        0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF,  //  ...
;        0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF,  //  ...
;        0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF,  //  ...
;        0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6,  //  ...
;        0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6,  //  ...
;        0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6,  //  ...
;        0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,  //  ...
;        0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //  ...
;        0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF   //  ...
;        };

	.DSEG
;
;
;   void question1(){
; 0000 0035 void question1(){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0036     int k,j;
; 0000 0037     int r = 0;
; 0000 0038     int c = 0;
; 0000 0039     int max_column = 8;
; 0000 003A     int min_column = 0;
; 0000 003B     int i=0;
; 0000 003C     while(1){
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;	k -> R16,R17
;	j -> R18,R19
;	r -> R20,R21
;	c -> Y+12
;	max_column -> Y+10
;	min_column -> Y+8
;	i -> Y+6
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 003D         for(i=0;i<150;i++){
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 003E                 PORTD = 0x80;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 003F                 PORTB = FK[r];
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0040                 PORTA = 1<<c;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0041 
; 0000 0042                 for(k = 0; k < 100; k++)
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0043                 {
; 0000 0044                     for(j = 0; j < 10; j++)
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0045                         ;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0046                 }
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0047 
; 0000 0048                 PORTD = 0x00;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0049                 PORTB = FK[r+8];
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 004A                 PORTA = 1<<c;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 004B 
; 0000 004C                 r++;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 004D                 if (r == max_column)
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 004E                 {
; 0000 004F                     r = min_column;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 0050                 }
; 0000 0051                 c = (c+1)%8;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0052                 for(k = 0; k < 100; k++)
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0053                 {
; 0000 0054                     for(j = 0; j < 10; j++)
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0055                         ;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0056                 }
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0057 
; 0000 0058           }
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 0059 
; 0000 005A           if (max_column == 248)
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 005B           {
; 0000 005C             max_column = 8;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 005D             min_column = 0;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 005E             r=0;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 005F             c=0;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0060           }
; 0000 0061 
; 0000 0062           else
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0063           {
; 0000 0064              max_column =  max_column + 16;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0065              min_column = min_column + 16;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0066           }
;PCODE: $000000A4 VOL: 0
; 0000 0067 
; 0000 0068     }
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0069 }
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;void main(void)
; 0000 006B {
;PCODE: $000000AB VOL: 0
; 0000 006C     question1();
;PCODE: $000000AC VOL: 0
; 0000 006D }
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
