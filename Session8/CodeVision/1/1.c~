/*******************************************************
This program was created by the
CodeWizardAVR V3.12 Advanced
Automatic Program Generator
© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
http://www.hpinfotech.com

Project : 
Version : 
Date    : 5/26/2021
Author  : 
Company : 
Comments: 


Chip type               : ATmega16
Program type            : Application
AVR Core Clock frequency: 8.000000 MHz
Memory model            : Small
External RAM size       : 0
Data Stack size         : 256
*******************************************************/

#include <mega16.h>
#include <delay.h>
// Font used for displaying text
// on the graphic display
#include <font5x7.h>
#include <math.h>

// Graphic Display functions


// Declare your global variables here
const unsigned short FK[] = {
        0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, // Code for char  
        0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF,  // Code for char !
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E,  // Code for char "
        0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD,  // Code for char #
        0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB,  // Code for char $
        0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7,  // Code for char %
        0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,  // Code for char &
        0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF,  // Code for char '
        0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF,  // Code for char (
        0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF,  // Code for char )
        0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF,  // Code for char *
        0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6,  // Code for char +
        0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6,  // Code for char ,
        0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6,  // Code for char -
        0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,  // Code for char .
        0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // Code for char /
        0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF   // Code for char 0
        };
        

   void question1(){   
    int k,j;
    int r = 0;
    int c = 0;
    int max_column = 8;
    int min_column = 0; 
    int i=0;  
    while(1){
        for(i=0;i<150;i++){
                PORTD = 0x80;
                PORTB = FK[r];
                PORTA = 1<<c;

                for(k = 0; k < 100; k++)
                {   
                    for(j = 0; j < 10; j++)
                        ;
                }

                PORTD = 0x00;
                PORTB = FK[r+8];
                PORTA = 1<<c;

                r++;
                if (r == max_column)
                {
                    r = min_column;   
                }
                c = (c+1)%8;
                for(k = 0; k < 100; k++)
                {   
                    for(j = 0; j < 10; j++)
                        ;
                }
                
          } 
                 
          if (max_column == 248)
          {
            max_column = 8;
            min_column = 0;
            r=0;
            c=0;
          }
                 
          else
          { 
             max_column =  max_column + 16;
             min_column = min_column + 16;
          }

    }        
}
void main(void)
{ 
    question1(); 
}