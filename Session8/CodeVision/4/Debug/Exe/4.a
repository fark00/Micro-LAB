;#include <headers.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Graphic Display functions
;
;GLCDINIT_t glcd_init_data;
;
;// Declare your global variables here
;
;unsigned long int x;
;unsigned long int y;
;unsigned int s = 0;
;unsigned int m = 0;
;unsigned int h = 0;
;
;const unsigned short FK[] = {
;        0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, // C ...
;        0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF,  //  ...
;        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E,  //  ...
;        0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD,  //  ...
;        0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB,  //  ...
;        0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7,  //  ...
;        0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,  //  ...
;        0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF,  //  ...
;        0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF,  //  ...
;        0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF,  //  ...
;        0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF,  //  ...
;        0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6, 0xF6,  //  ...
;        0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6, 0xF6,  //  ...
;        0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xF6,  //  ...
;        0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x00,  //  ...
;        0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  //  ...
;        0xFF, 0x00, 0xF6, 0xF6, 0xF6, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE7, 0xDB, 0xBD, 0x7E, 0xFF, 0xFF, 0xFF, 0xFF   //  ...
;        };
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0025 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0026 // Reinitialize Timer1 value
; 0000 0027 TCNT1H=0x85EE >> 8;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0028 TCNT1L=0x85EE & 0xff;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0029 // Place your code here
; 0000 002A question3();
;PCODE: $00000013 VOL: 0
; 0000 002B 
; 0000 002C }
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;
;void main(void)
; 0000 002F {
;PCODE: $00000017 VOL: 0
; 0000 0030     int i,j;
; 0000 0031     // Declare your local variables here
; 0000 0032     // Variable used to store graphic display
; 0000 0033     init_board();
;	i -> R16,R17
;	j -> R18,R19
;PCODE: $00000018 VOL: 0
; 0000 0034     glcd_init(&glcd_init_data);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0035 
; 0000 0036     // Global enable interrupts
; 0000 0037     question2();
;PCODE: $0000001B VOL: 0
; 0000 0038      for(i = 0; i < 90; i++)
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0039         for(j = 0; j < 90; j++);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 003A     // Global enable interrupts
; 0000 003B     #asm("sei")
;PCODE: $00000038 VOL: 0
	sei
;PCODE: $00000039 VOL: 0
; 0000 003C      for(i = 0; i < 90; i++)
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 003D         for(j = 0; j < 90; j++);    #asm("cli")
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
	cli
;PCODE: $00000057 VOL: 0
; 0000 003E     question1();
;PCODE: $00000058 VOL: 0
; 0000 003F }
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
