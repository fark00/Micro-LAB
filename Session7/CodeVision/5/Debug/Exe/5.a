;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 5/11/2021
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <header.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index=0,rx_rd_index=0;
;#else
;unsigned int rx_wr_index=0,rx_rd_index=0;
;#endif
;
;#if RX_BUFFER_SIZE < 256
;unsigned char rx_counter=0;
;#else
;unsigned int rx_counter=0;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0035 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0036 char status,data;
; 0000 0037 status=UCSRA;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0038 data=UDR;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0039 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 003A    {
; 0000 003B    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 003C #if RX_BUFFER_SIZE == 256
; 0000 003D    // special case for receiver buffer size=256
; 0000 003E    if (++rx_counter == 0) rx_buffer_overflow=1;
; 0000 003F #else
; 0000 0040    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0041    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0042       {
; 0000 0043       rx_counter=0;
;PCODE: $00000026 VOL: 0
; 0000 0044       rx_buffer_overflow=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0045       }
; 0000 0046 #endif
; 0000 0047    }
;PCODE: $0000002A VOL: 0
; 0000 0048 }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;/*
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+   */
;char getchar_(void)
; 0000 004F {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0050 char data;
; 0000 0051 while (rx_counter==0);
;PCODE: $00000032 VOL: 0
;	data -> R17
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0052 data=rx_buffer[rx_rd_index++];
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0053 #if RX_BUFFER_SIZE != 256
; 0000 0054 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0055 #endif
; 0000 0056 #asm("cli")
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
	cli
;PCODE: $00000043 VOL: 0
; 0000 0057 --rx_counter;
;PCODE: $00000044 VOL: 0
; 0000 0058 #asm("sei")
;PCODE: $00000045 VOL: 0
	sei
;PCODE: $00000046 VOL: 0
; 0000 0059 return data;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 005A }
;PCODE: $0000004A VOL: 0
;
;/*
;#pragma used-
;#endif */
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 8
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE <= 256
;unsigned char tx_wr_index=0,tx_rd_index=0;
;#else
;unsigned int tx_wr_index=0,tx_rd_index=0;
;#endif
;
;#if TX_BUFFER_SIZE < 256
;unsigned char tx_counter=0;
;#else
;unsigned int tx_counter=0;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 0072 {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0073 if (tx_counter)
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0074    {
; 0000 0075    --tx_counter;
;PCODE: $0000004F VOL: 0
; 0000 0076    UDR=tx_buffer[tx_rd_index++];
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0077 #if TX_BUFFER_SIZE != 256
; 0000 0078    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0079 #endif
; 0000 007A    }
;PCODE: $0000005A VOL: 0
; 0000 007B }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;/*
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+    */
;void putchar_(char c)
; 0000 0082 {
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0083 while (tx_counter == TX_BUFFER_SIZE);
;PCODE: $00000061 VOL: 0
;	c -> Y+0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0084 #asm("cli")
;PCODE: $00000068 VOL: 0
	cli
;PCODE: $00000069 VOL: 0
; 0000 0085 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0086    {
; 0000 0087    tx_buffer[tx_wr_index++]=c;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0088 #if TX_BUFFER_SIZE != 256
; 0000 0089    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 008A #endif
; 0000 008B    ++tx_counter;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 008C    }
; 0000 008D else
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 008E    UDR=c;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 008F #asm("sei")
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
	sei
;PCODE: $00000083 VOL: 0
; 0000 0090 }
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;/*
;#pragma used-
;#endif       */
;
;// Question1
;void routin1(int BAUD, int transmitter_status, int reciever_status);
;
;// Question4
;void routin4(void);
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;void main(void)
; 0000 009F {
;PCODE: $00000087 VOL: 0
; 0000 00A0 // Declare your local variables here
; 0000 00A1 
; 0000 00A2 // Global enable interrupts
; 0000 00A3 #asm("sei")
;PCODE: $00000088 VOL: 0
	sei
;PCODE: $00000089 VOL: 0
; 0000 00A4     init();
;PCODE: $0000008A VOL: 0
; 0000 00A5     routin1(9600,1,1);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00A6     puts("Question5: start...\r");
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00A7     puts("part 2 is running!\r");
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00A8     routin2();
;PCODE: $00000098 VOL: 0
; 0000 00A9     routin2();
;PCODE: $00000099 VOL: 0
; 0000 00AA     routin2();
;PCODE: $0000009A VOL: 0
; 0000 00AB     puts("part 2 is ended!\r");
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00AC     routin1(9600,1,2);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00AD     puts("part 3 is running!\r");
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00AE     routin3();
;PCODE: $000000A8 VOL: 0
; 0000 00AF     routin3();
;PCODE: $000000A9 VOL: 0
; 0000 00B0     routin3();
;PCODE: $000000AA VOL: 0
; 0000 00B1     puts("part 3 is ended!\r");
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00B2     routin1(9600,2,2);
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00B3     puts("part 4 is running!\r");
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00B4     routin4();
;PCODE: $000000B8 VOL: 0
; 0000 00B5     routin4();
;PCODE: $000000B9 VOL: 0
; 0000 00B6     routin4();
;PCODE: $000000BA VOL: 0
; 0000 00B7     puts("part 4 is ended!\r");
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00B8      puts("Question5: end...\r");
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00B9     while(1){}
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00BA }
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0

	.DSEG
_0x14:
	.BYTE 0x9A
