;#include <header.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;
;void routin1(int BAUD, int transmitter_status, int reciever_status){
; 0002 0004 void routin1(int BAUD, int transmitter_status, int reciever_status){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 0005     int temp = (1000000/(2*BAUD))-1;
; 0002 0006     int q,r;
; 0002 0007     q = temp/256;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	BAUD -> Y+10
;	transmitter_status -> Y+8
;	reciever_status -> Y+6
;	temp -> R16,R17
;	q -> R18,R19
;	r -> R20,R21
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0002 0008     r = temp - (q*256);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0002 0009 
; 0002 000A     if(transmitter_status == 0 && reciever_status == 0){
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0002 000B         UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0002 000C     } // tx: off     rx: off
; 0002 000D     else if(transmitter_status == 1 && reciever_status == 0){
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0002 000E         UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0002 000F     } // tx: enable_noneinterrupt       rx: off
; 0002 0010     else if(transmitter_status == 2 && reciever_status == 0){
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0002 0011         UCSRB=(0<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0002 0012     } // tx: enable_interrupt       rx: off
; 0002 0013     else if(transmitter_status == 0 && reciever_status == 1){
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0002 0014         UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0002 0015     } // tx: off     rx:  enable_noneinterrupt
; 0002 0016     else if(transmitter_status == 1 && reciever_status == 1){
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0002 0017         UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0002 0018     } // tx: enable_noneinterrupt       rx:  enable_noneinterrupt
; 0002 0019     else if(transmitter_status == 2 && reciever_status == 1){
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0002 001A         UCSRB=(0<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0002 001B     } // tx: enable_interrupt       rx:  enable_noneinterrupt
; 0002 001C     else if(transmitter_status == 0 && reciever_status == 2){
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0002 001D         UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0002 001E     } // tx: off     rx:  enable_interrupt
; 0002 001F     else if(transmitter_status == 1 && reciever_status == 2){
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0002 0020         UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0002 0021     } // tx: enable_noneinterrupt       rx:  enable_interrupt
; 0002 0022     else if(transmitter_status == 2 && reciever_status == 2){
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0002 0023         UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0002 0024     } // tx: enable_interrupt       rx:  enable_interrupt
; 0002 0025     UBRRH = q;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0002 0026     UBRRL = r;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0002 0027 }
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;
;void routin2(){
; 0002 0029 void routin2(){
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0002 002A     char str2[100] = "";
; 0002 002B     char temp = '';
; 0002 002C     int n = 0;
; 0002 002D     temp = getchar();
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;	str2 -> Y+4
;	temp -> R17
;	n -> R18,R19
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0002 002E     putchar(temp);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0002 002F     str2[0] = '(';
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0002 0030     n++;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0002 0031     while(temp != '\r'){
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0002 0032         str2[n] = temp;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0002 0033         temp = getchar();
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0002 0034         putchar(temp);
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0002 0035         n++;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0002 0036     }
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0002 0037     str2[n] = ')';
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0002 0038     puts(str2);
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0002 0039     putchar('\r');
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0002 003A 
; 0002 003B }
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;
;void routin3(void){
; 0002 003D void routin3(void){
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0002 003E     unsigned char temp='';
; 0002 003F     int a=0;
; 0002 0040     unsigned char str[3]="";
; 0002 0041     temp = getchar_();
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;	temp -> R17
;	a -> R18,R19
;	str -> Y+4
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0002 0042     switch (temp){
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0002 0043         case '0':
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0002 0044             a=0;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0002 0045             break;
;PCODE: $000000F4 VOL: 0
; 0002 0046         case '1':
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0002 0047             a=1;
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0002 0048             break;
;PCODE: $000000FA VOL: 0
; 0002 0049         case '2':
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0002 004A             a=2;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0002 004B             break;
;PCODE: $00000100 VOL: 0
; 0002 004C         case '3':
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0002 004D             a=3;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0002 004E             break;
;PCODE: $00000106 VOL: 0
; 0002 004F         case '4':
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0002 0050             a=4;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0002 0051             break;
;PCODE: $0000010C VOL: 0
; 0002 0052         case '5':
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0002 0053             a=5;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0002 0054             break;
;PCODE: $00000112 VOL: 0
; 0002 0055         case '6':
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0002 0056             a=6;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0002 0057             break;
;PCODE: $00000118 VOL: 0
; 0002 0058         case '7':
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0002 0059             a=7;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0002 005A             break;
;PCODE: $0000011E VOL: 0
; 0002 005B         case '8':
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0002 005C             a=8;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0002 005D             break;
;PCODE: $00000124 VOL: 0
; 0002 005E         case '9':
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0002 005F             a=9;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0002 0060             break;
;PCODE: $0000012A VOL: 0
; 0002 0061         default:
;PCODE: $0000012B VOL: 0
; 0002 0062             a=100;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0002 0063     }
;PCODE: $0000012E VOL: 0
; 0002 0064     if( a>=0 && a<10){
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0002 0065         puts("\rTx:");
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0002 0066         putchar(temp);
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0002 0067         puts("\rRx: Data is a integer and 10*data=");
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0002 0068         a=a*10;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0002 0069         sprintf(str, "%d", a);
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0002 006A         puts(str);
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0002 006B         puts("\r");
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0002 006C      }
; 0002 006D 
; 0002 006E     else if(temp=='D'){
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0002 006F         lcd_puts("LCD delete");
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0002 0070     }
; 0002 0071 
; 0002 0072     else if(temp=='H'){
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0002 0073         puts("\rMicro Laboratory\r");
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0002 0074     }
; 0002 0075 
; 0002 0076     else {
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0002 0077         puts("\rNo function defined!\r");
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0002 0078     }
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0002 0079 
; 0002 007A }
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0

	.DSEG
_0x4003B:
	.BYTE 0x60
;
;
;void routin4(void){
; 0002 007D void routin4(void){

	.CSEG
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0002 007E     unsigned char my_data[55]="";
; 0002 007F     unsigned char in4='';
; 0002 0080     int i=0;
; 0002 0081     int a=0;
; 0002 0082     int j=0;
; 0002 0083     in4 = getchar_();
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;	my_data -> Y+8
;	in4 -> R17
;	i -> R18,R19
;	a -> R20,R21
;	j -> Y+6
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0002 0084     putchar_(in4);
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0002 0085     my_data[0]='(';
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0002 0086     i++;
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0002 0087     while (in4!='\r'){
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0002 0088         my_data[i]=in4;
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0002 0089         in4 = getchar_();
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0002 008A         putchar_(in4);
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0002 008B         i++;
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0002 008C     }
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0002 008D     my_data[i]=')';
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0002 008E     for (j=0;my_data[j]!=')';j++){
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0002 008F         if((my_data[j]<'0' || my_data[j]>'9')&&my_data[j]!='(')
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0002 0090         {
; 0002 0091             a = 100;
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0002 0092             break ;
;PCODE: $000001C2 VOL: 0
; 0002 0093         }
; 0002 0094     }
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0002 0095     if(i<6){
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0002 0096         puts("\tLength of frame not correct\r");
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0002 0097     }
; 0002 0098     else if (a>9 || i > 6){
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0002 0099        puts("\tFrame must be 5 integer\r");
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0002 009A     }
; 0002 009B     else {
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0002 009C         puts("\tFrame is correct\r");
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0002 009D         lcd_init(16);
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0002 009E         lcd_puts(my_data);
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0002 009F     }
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0002 00A0 }
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0

	.DSEG
_0x4004E:
	.BYTE 0x4B
