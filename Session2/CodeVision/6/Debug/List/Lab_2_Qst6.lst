
AVRASM ver. 2.1.30  C:\users\farkoo\My Documents\Az Micro\2\6\Debug\List\Lab_2_Qst6.asm Mon Mar 08 01:16:21 2021

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x60003:
00002a 063f
00002b 4f5b
00002c 6d66
00002d 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00002e 6f7f      	.DB  0x7F,0x6F
                 _0x80003:
00002f 063f
000030 4f5b
000031 6d66
000032 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
000033 6f7f      	.DB  0x7F,0x6F
                 
                 __GLOBAL_INI_TBL:
000034 000a      	.DW  0x0A
000035 0160      	.DW  _array2
000036 0054      	.DW  _0x60003*2
                 
000037 000a      	.DW  0x0A
000038 016a      	.DW  _array
000039 005e      	.DW  _0x80003*2
                 
                 _0xFFFFFFFF:
00003a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003b 94f8      	CLI
00003c 27ee      	CLR  R30
00003d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003e e0f1      	LDI  R31,1
00003f bffb      	OUT  GICR,R31
000040 bfeb      	OUT  GICR,R30
000041 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000042 e08d      	LDI  R24,(14-2)+1
000043 e0a2      	LDI  R26,2
000044 27bb      	CLR  R27
                 __CLEAR_REG:
000045 93ed      	ST   X+,R30
000046 958a      	DEC  R24
000047 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000048 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000049 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004b 93ed      	ST   X+,R30
00004c 9701      	SBIW R24,1
00004d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004e e6e8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000050 9185      	LPM  R24,Z+
000051 9195      	LPM  R25,Z+
000052 9700      	SBIW R24,0
000053 f061      	BREQ __GLOBAL_INI_END
000054 91a5      	LPM  R26,Z+
000055 91b5      	LPM  R27,Z+
000056 9005      	LPM  R0,Z+
000057 9015      	LPM  R1,Z+
000058 01bf      	MOVW R22,R30
000059 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005a 9005      	LPM  R0,Z+
00005b 920d      	ST   X+,R0
00005c 9701      	SBIW R24,1
00005d f7e1      	BRNE __GLOBAL_INI_LOOP
00005e 01fb      	MOVW R30,R22
00005f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000060 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000061 bfed      	OUT  SPL,R30
000062 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000063 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000064 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000065 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000066 940c 0222 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <header.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;void func1(char num, char port, int ms_delay){
                 ; 0000 0003 void func1(char num, char port, int ms_delay){
                 
                 	.CSEG
                 _func1:
                 ; .FSTART _func1
                 ; 0000 0004     char i;
                 ; 0000 0005     switch(port){
000068 93ba      	ST   -Y,R27
000069 93aa      	ST   -Y,R26
00006a 931a      	ST   -Y,R17
                 ;	num -> Y+4
                 ;	port -> Y+3
                 ;	ms_delay -> Y+1
                 ;	i -> R17
00006b 81eb      	LDD  R30,Y+3
00006c 940e 0225 	CALL SUBOPT_0x0
                 ; 0000 0006         case portA:
00006e f419      	BRNE _0x6
                 ; 0000 0007             DDRA = 0xFF;
00006f efef      	LDI  R30,LOW(255)
000070 bbea      	OUT  0x1A,R30
                 ; 0000 0008             break;
000071 c014      	RJMP _0x5
                 ; 0000 0009         case portB:
                 _0x6:
000072 30e2      	CPI  R30,LOW(0x2)
000073 e0a0      	LDI  R26,HIGH(0x2)
000074 07fa      	CPC  R31,R26
000075 f071      	BREQ _0xE
                 ; 0000 000A             DDRB = 0xFF;
                 ; 0000 000B             break;
                 ; 0000 000C         case portC:
000076 30e3      	CPI  R30,LOW(0x3)
000077 e0a0      	LDI  R26,HIGH(0x3)
000078 07fa      	CPC  R31,R26
000079 f419      	BRNE _0x8
                 ; 0000 000D             DDRC = 0xFF;
00007a efef      	LDI  R30,LOW(255)
00007b bbe4      	OUT  0x14,R30
                 ; 0000 000E             break;
00007c c009      	RJMP _0x5
                 ; 0000 000F         case portD:
                 _0x8:
00007d 30e4      	CPI  R30,LOW(0x4)
00007e e0a0      	LDI  R26,HIGH(0x4)
00007f 07fa      	CPC  R31,R26
000080 f419      	BRNE _0xA
                 ; 0000 0010             DDRD = 0xFF;
000081 efef      	LDI  R30,LOW(255)
000082 bbe1      	OUT  0x11,R30
                 ; 0000 0011             break;
000083 c002      	RJMP _0x5
                 ; 0000 0012         default:
                 _0xA:
                 ; 0000 0013             DDRB = 0xFF;
                 _0xE:
000084 efef      	LDI  R30,LOW(255)
000085 bbe7      	OUT  0x17,R30
                 ; 0000 0014     }
                 _0x5:
                 ; 0000 0015     for(i = 0; i < num; i++){
000086 e010      	LDI  R17,LOW(0)
                 _0xC:
000087 81ec      	LDD  R30,Y+4
000088 171e      	CP   R17,R30
000089 f470      	BRSH _0xD
                 ; 0000 0016                     PORTB = 0xFF;
00008a efef      	LDI  R30,LOW(255)
00008b bbe8      	OUT  0x18,R30
                 ; 0000 0017                     delay_ms(ms_delay);
00008c 81a9      	LDD  R26,Y+1
00008d 81ba      	LDD  R27,Y+1+1
00008e 940e 0254 	CALL _delay_ms
                 ; 0000 0018                     PORTB = 0x00;
000090 e0e0      	LDI  R30,LOW(0)
000091 bbe8      	OUT  0x18,R30
                 ; 0000 0019                     delay_ms(ms_delay);
000092 81a9      	LDD  R26,Y+1
000093 81ba      	LDD  R27,Y+1+1
000094 940e 0254 	CALL _delay_ms
                 ; 0000 001A     }
000096 5f1f      	SUBI R17,-1
000097 cfef      	RJMP _0xC
                 _0xD:
                 ; 0000 001B     return;
000098 8118      	LDD  R17,Y+0
000099 940c 0170 	JMP  _0x2000002
                 ; 0000 001C }
                 ; .FEND
                 ;#include <header.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void func2(char startpos, int ms_duration){
                 ; 0001 0003 void func2(char startpos, int ms_duration){
                 
                 	.CSEG
                 _func2:
                 ; .FSTART _func2
                 ; 0001 0004     int counter;
                 ; 0001 0005     DDRB = 0xFF;
00009b 93ba      	ST   -Y,R27
00009c 93aa      	ST   -Y,R26
00009d 931a      	ST   -Y,R17
00009e 930a      	ST   -Y,R16
                 ;	startpos -> Y+4
                 ;	ms_duration -> Y+2
                 ;	counter -> R16,R17
00009f efef      	LDI  R30,LOW(255)
0000a0 bbe7      	OUT  0x17,R30
                 ; 0001 0006     switch(startpos){
0000a1 81ec      	LDD  R30,Y+4
0000a2 940e 0225 	CALL SUBOPT_0x0
                 ; 0001 0007         case 1:
0000a4 f411      	BRNE _0x20006
                 ; 0001 0008             PORTB = 0x01;
0000a5 e0e1      	LDI  R30,LOW(1)
0000a6 c025      	RJMP _0x20013
                 ; 0001 0009             break;
                 ; 0001 000A          case 2:
                 _0x20006:
0000a7 30e2      	CPI  R30,LOW(0x2)
0000a8 e0a0      	LDI  R26,HIGH(0x2)
0000a9 07fa      	CPC  R31,R26
0000aa f411      	BRNE _0x20007
                 ; 0001 000B             PORTB = 0x02;
0000ab e0e2      	LDI  R30,LOW(2)
0000ac c01f      	RJMP _0x20013
                 ; 0001 000C             break;
                 ; 0001 000D         case 3:
                 _0x20007:
0000ad 30e3      	CPI  R30,LOW(0x3)
0000ae e0a0      	LDI  R26,HIGH(0x3)
0000af 07fa      	CPC  R31,R26
0000b0 f411      	BRNE _0x20008
                 ; 0001 000E             PORTB = 0x04;
0000b1 e0e4      	LDI  R30,LOW(4)
0000b2 c019      	RJMP _0x20013
                 ; 0001 000F             break;
                 ; 0001 0010         case 4:
                 _0x20008:
0000b3 30e4      	CPI  R30,LOW(0x4)
0000b4 e0a0      	LDI  R26,HIGH(0x4)
0000b5 07fa      	CPC  R31,R26
0000b6 f411      	BRNE _0x20009
                 ; 0001 0011             PORTB = 0x08;
0000b7 e0e8      	LDI  R30,LOW(8)
0000b8 c013      	RJMP _0x20013
                 ; 0001 0012             break;
                 ; 0001 0013          case 5:
                 _0x20009:
0000b9 30e5      	CPI  R30,LOW(0x5)
0000ba e0a0      	LDI  R26,HIGH(0x5)
0000bb 07fa      	CPC  R31,R26
0000bc f411      	BRNE _0x2000A
                 ; 0001 0014             PORTB = 0x10;
0000bd e1e0      	LDI  R30,LOW(16)
0000be c00d      	RJMP _0x20013
                 ; 0001 0015             break;
                 ; 0001 0016          case 6:
                 _0x2000A:
0000bf 30e6      	CPI  R30,LOW(0x6)
0000c0 e0a0      	LDI  R26,HIGH(0x6)
0000c1 07fa      	CPC  R31,R26
0000c2 f411      	BRNE _0x2000B
                 ; 0001 0017             PORTB = 0x20;
0000c3 e2e0      	LDI  R30,LOW(32)
0000c4 c007      	RJMP _0x20013
                 ; 0001 0018             break;
                 ; 0001 0019         case 7:
                 _0x2000B:
0000c5 30e7      	CPI  R30,LOW(0x7)
0000c6 e0a0      	LDI  R26,HIGH(0x7)
0000c7 07fa      	CPC  R31,R26
0000c8 f411      	BRNE _0x2000C
                 ; 0001 001A             PORTB = 0x40;
0000c9 e4e0      	LDI  R30,LOW(64)
0000ca c001      	RJMP _0x20013
                 ; 0001 001B             break;
                 ; 0001 001C         case 8:
                 _0x2000C:
                 ; 0001 001D             PORTB = 0x80;
                 ; 0001 001E             break;
                 ; 0001 001F          default:
                 ; 0001 0020             PORTB = 0x80;
                 _0x20014:
0000cb e8e0      	LDI  R30,LOW(128)
                 _0x20013:
0000cc bbe8      	OUT  0x18,R30
                 ; 0001 0021     }
                 ; 0001 0022     counter = 0;
                +
0000cd e000     +LDI R16 , LOW ( 0 )
0000ce e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0001 0023     while(counter != ms_duration){
                 _0x2000F:
0000cf 81ea      	LDD  R30,Y+2
0000d0 81fb      	LDD  R31,Y+2+1
0000d1 17e0      	CP   R30,R16
0000d2 07f1      	CPC  R31,R17
0000d3 f089      	BREQ _0x20011
                 ; 0001 0024               if(PORTB == 0x00)
0000d4 b3e8      	IN   R30,0x18
0000d5 30e0      	CPI  R30,0
0000d6 f411      	BRNE _0x20012
                 ; 0001 0025                 PORTB =  0x80;
0000d7 e8e0      	LDI  R30,LOW(128)
0000d8 bbe8      	OUT  0x18,R30
                 ; 0001 0026               delay_ms(100);
                 _0x20012:
0000d9 e6a4      	LDI  R26,LOW(100)
0000da e0b0      	LDI  R27,0
0000db 940e 0254 	CALL _delay_ms
                 ; 0001 0027               counter += 100;
                +
0000dd 590c     +SUBI R16 , LOW ( - 100 )
0000de 4f1f     +SBCI R17 , HIGH ( - 100 )
                 	__ADDWRN 16,17,100
                 ; 0001 0028               PORTB = PORTB>>1;
0000df b3e8      	IN   R30,0x18
0000e0 e0f0      	LDI  R31,0
0000e1 95f5      	ASR  R31
0000e2 95e7      	ROR  R30
0000e3 bbe8      	OUT  0x18,R30
                 ; 0001 0029     }
0000e4 cfea      	RJMP _0x2000F
                 _0x20011:
                 ; 0001 002A     return;
0000e5 940c 016e 	JMP  _0x2000001
                 ; 0001 002B }
                 ; .FEND
                 ;#include <header.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void func3(char inport, char outport){
                 ; 0002 0003 void func3(char inport, char outport){
                 
                 	.CSEG
                 _func3:
                 ; .FSTART _func3
                 ; 0002 0004     char selectin;
                 ; 0002 0005     switch(inport){
0000e7 93aa      	ST   -Y,R26
0000e8 931a      	ST   -Y,R17
                 ;	inport -> Y+2
                 ;	outport -> Y+1
                 ;	selectin -> R17
0000e9 81ea      	LDD  R30,Y+2
0000ea 940e 0225 	CALL SUBOPT_0x0
                 ; 0002 0006         case portA:
0000ec f0c1      	BREQ _0x40013
                 ; 0002 0007             DDRA = 0x00;
                 ; 0002 0008             selectin = PINA;
                 ; 0002 0009             break;
                 ; 0002 000A         case portB:
0000ed 30e2      	CPI  R30,LOW(0x2)
0000ee e0a0      	LDI  R26,HIGH(0x2)
0000ef 07fa      	CPC  R31,R26
0000f0 f421      	BRNE _0x40007
                 ; 0002 000B             DDRB = 0x00;
0000f1 e0e0      	LDI  R30,LOW(0)
0000f2 bbe7      	OUT  0x17,R30
                 ; 0002 000C             selectin = PINB;
0000f3 b316      	IN   R17,22
                 ; 0002 000D             break;
0000f4 c013      	RJMP _0x40005
                 ; 0002 000E         case portC:
                 _0x40007:
0000f5 30e3      	CPI  R30,LOW(0x3)
0000f6 e0a0      	LDI  R26,HIGH(0x3)
0000f7 07fa      	CPC  R31,R26
0000f8 f421      	BRNE _0x40008
                 ; 0002 000F             DDRC = 0x00;
0000f9 e0e0      	LDI  R30,LOW(0)
0000fa bbe4      	OUT  0x14,R30
                 ; 0002 0010             selectin = PINC;
0000fb b313      	IN   R17,19
                 ; 0002 0011             break;
0000fc c00b      	RJMP _0x40005
                 ; 0002 0012         case portD:
                 _0x40008:
0000fd 30e4      	CPI  R30,LOW(0x4)
0000fe e0a0      	LDI  R26,HIGH(0x4)
0000ff 07fa      	CPC  R31,R26
000100 f421      	BRNE _0x4000A
                 ; 0002 0013             DDRD = 0x00;
000101 e0e0      	LDI  R30,LOW(0)
000102 bbe1      	OUT  0x11,R30
                 ; 0002 0014             selectin = PIND;
000103 b310      	IN   R17,16
                 ; 0002 0015             break;
000104 c003      	RJMP _0x40005
                 ; 0002 0016          default:
                 _0x4000A:
                 ; 0002 0017             DDRA = 0x00;
                 _0x40013:
000105 e0e0      	LDI  R30,LOW(0)
000106 bbea      	OUT  0x1A,R30
                 ; 0002 0018             selectin = PINA;
000107 b319      	IN   R17,25
                 ; 0002 0019     }
                 _0x40005:
                 ; 0002 001A     switch(outport){
000108 81e9      	LDD  R30,Y+1
000109 940e 0225 	CALL SUBOPT_0x0
                 ; 0002 001B         case portA:
00010b f421      	BRNE _0x4000E
                 ; 0002 001C             DDRA = 0xFF;
00010c efef      	LDI  R30,LOW(255)
00010d bbea      	OUT  0x1A,R30
                 ; 0002 001D             PORTA = selectin;
00010e bb1b      	OUT  0x1B,R17
                 ; 0002 001E             break;
00010f c017      	RJMP _0x4000D
                 ; 0002 001F         case portB:
                 _0x4000E:
000110 30e2      	CPI  R30,LOW(0x2)
000111 e0a0      	LDI  R26,HIGH(0x2)
000112 07fa      	CPC  R31,R26
000113 f081      	BREQ _0x40014
                 ; 0002 0020             DDRB = 0xFF;
                 ; 0002 0021             PORTB = selectin;
                 ; 0002 0022             break;
                 ; 0002 0023         case portC:
000114 30e3      	CPI  R30,LOW(0x3)
000115 e0a0      	LDI  R26,HIGH(0x3)
000116 07fa      	CPC  R31,R26
000117 f421      	BRNE _0x40010
                 ; 0002 0024             DDRC = 0xFF;
000118 efef      	LDI  R30,LOW(255)
000119 bbe4      	OUT  0x14,R30
                 ; 0002 0025             PORTC = selectin;
00011a bb15      	OUT  0x15,R17
                 ; 0002 0026             break;
00011b c00b      	RJMP _0x4000D
                 ; 0002 0027         case portD:
                 _0x40010:
00011c 30e4      	CPI  R30,LOW(0x4)
00011d e0a0      	LDI  R26,HIGH(0x4)
00011e 07fa      	CPC  R31,R26
00011f f421      	BRNE _0x40012
                 ; 0002 0028             DDRD = 0xFF;
000120 efef      	LDI  R30,LOW(255)
000121 bbe1      	OUT  0x11,R30
                 ; 0002 0029             PORTD = selectin;
000122 bb12      	OUT  0x12,R17
                 ; 0002 002A             break;
000123 c003      	RJMP _0x4000D
                 ; 0002 002B          default:
                 _0x40012:
                 ; 0002 002C             DDRB = 0xFF;
                 _0x40014:
000124 efef      	LDI  R30,LOW(255)
000125 bbe7      	OUT  0x17,R30
                 ; 0002 002D             PORTB = selectin;
000126 bb18      	OUT  0x18,R17
                 ; 0002 002E     }
                 _0x4000D:
                 ; 0002 002F }
000127 8118      	LDD  R17,Y+0
000128 9623      	ADIW R28,3
000129 9508      	RET
                 ; .FEND
                 ;#include <header.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;char array2[]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
                 
                 	.DSEG
                 ;
                 ;void func4(char direction, char concurrent, char which){
                 ; 0003 0005 void func4(char direction, char concurrent, char which){
                 
                 	.CSEG
                 _func4:
                 ; .FSTART _func4
                 ; 0003 0006     int i;
                 ; 0003 0007     DDRC = 0xFF;
00012a 93aa      	ST   -Y,R26
00012b 931a      	ST   -Y,R17
00012c 930a      	ST   -Y,R16
                 ;	direction -> Y+4
                 ;	concurrent -> Y+3
                 ;	which -> Y+2
                 ;	i -> R16,R17
00012d efef      	LDI  R30,LOW(255)
00012e bbe4      	OUT  0x14,R30
                 ; 0003 0008     if(concurrent == True)
00012f 81ab      	LDD  R26,Y+3
000130 30a1      	CPI  R26,LOW(0x1)
000131 f0d9      	BREQ _0x60020
                 ; 0003 0009         DDRD = 0x0F;
                 ; 0003 000A     else if(concurrent == False){
000132 81eb      	LDD  R30,Y+3
000133 30e0      	CPI  R30,0
000134 f4d1      	BRNE _0x60006
                 ; 0003 000B         switch(which){
000135 81ea      	LDD  R30,Y+2
000136 940e 0225 	CALL SUBOPT_0x0
                 ; 0003 000C             case 1:
000138 f411      	BRNE _0x6000A
                 ; 0003 000D                 DDRD.1 = 1;
000139 9a89      	SBI  0x11,1
                 ; 0003 000E                 break;
00013a c014      	RJMP _0x60009
                 ; 0003 000F              case 2:
                 _0x6000A:
00013b 30e2      	CPI  R30,LOW(0x2)
00013c e0a0      	LDI  R26,HIGH(0x2)
00013d 07fa      	CPC  R31,R26
00013e f411      	BRNE _0x6000D
                 ; 0003 0010                 DDRD.2 = 1;
00013f 9a8a      	SBI  0x11,2
                 ; 0003 0011                 break;
000140 c00e      	RJMP _0x60009
                 ; 0003 0012             case 3:
                 _0x6000D:
000141 30e3      	CPI  R30,LOW(0x3)
000142 e0a0      	LDI  R26,HIGH(0x3)
000143 07fa      	CPC  R31,R26
000144 f411      	BRNE _0x60010
                 ; 0003 0013                 DDRD.3 = 1;
000145 9a8b      	SBI  0x11,3
                 ; 0003 0014                 break;
000146 c008      	RJMP _0x60009
                 ; 0003 0015             case 4:
                 _0x60010:
000147 30e4      	CPI  R30,LOW(0x4)
000148 e0a0      	LDI  R26,HIGH(0x4)
000149 07fa      	CPC  R31,R26
00014a f411      	BRNE _0x60016
                 ; 0003 0016                 DDRD.4 = 1;
00014b 9a8c      	SBI  0x11,4
                 ; 0003 0017                 break;
00014c c002      	RJMP _0x60009
                 ; 0003 0018             default:
                 _0x60016:
                 ; 0003 0019                 DDRD = 0x0F;
                 _0x60020:
00014d e0ef      	LDI  R30,LOW(15)
00014e bbe1      	OUT  0x11,R30
                 ; 0003 001A         }
                 _0x60009:
                 ; 0003 001B     }
                 ; 0003 001C     if(direction == inc) {
                 _0x60006:
00014f 81ac      	LDD  R26,Y+4
000150 30a1      	CPI  R26,LOW(0x1)
000151 f469      	BRNE _0x60017
                 ; 0003 001D         i = 0;
                +
000152 e000     +LDI R16 , LOW ( 0 )
000153 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0003 001E         while(i != 10){
                 _0x60018:
000154 e0ea      	LDI  R30,LOW(10)
000155 e0f0      	LDI  R31,HIGH(10)
000156 17e0      	CP   R30,R16
000157 07f1      	CPC  R31,R17
000158 f029      	BREQ _0x6001A
                 ; 0003 001F             PORTC = array2[i];
000159 940e 022a 	CALL SUBOPT_0x1
                 ; 0003 0020             delay_ms(500);
                 ; 0003 0021             i++;
                +
00015b 5f0f     +SUBI R16 , LOW ( - 1 )
00015c 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0003 0022         }
00015d cff6      	RJMP _0x60018
                 _0x6001A:
                 ; 0003 0023     }
                 ; 0003 0024     else if(direction == dec) {
00015e c00f      	RJMP _0x6001B
                 _0x60017:
00015f 81ec      	LDD  R30,Y+4
000160 30e0      	CPI  R30,0
000161 f461      	BRNE _0x6001C
                 ; 0003 0025         i = 9;
                +
000162 e009     +LDI R16 , LOW ( 9 )
000163 e010     +LDI R17 , HIGH ( 9 )
                 	__GETWRN 16,17,9
                 ; 0003 0026         while(i != -1){
                 _0x6001D:
000164 efef      	LDI  R30,LOW(65535)
000165 efff      	LDI  R31,HIGH(65535)
000166 17e0      	CP   R30,R16
000167 07f1      	CPC  R31,R17
000168 f029      	BREQ _0x6001F
                 ; 0003 0027             PORTC = array2[i];
000169 940e 022a 	CALL SUBOPT_0x1
                 ; 0003 0028             delay_ms(500);
                 ; 0003 0029             i--;
                +
00016b 5001     +SUBI R16 , LOW ( 1 )
00016c 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 ; 0003 002A         }
00016d cff6      	RJMP _0x6001D
                 _0x6001F:
                 ; 0003 002B     }
                 ; 0003 002C }
                 _0x6001C:
                 _0x6001B:
                 _0x2000001:
00016e 8119      	LDD  R17,Y+1
00016f 8108      	LDD  R16,Y+0
                 _0x2000002:
000170 9625      	ADIW R28,5
000171 9508      	RET
                 ; .FEND
                 ;#include <header.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;char array[]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
                 
                 	.DSEG
                 ;
                 ;void func5(char step){
                 ; 0004 0005 void func5(char step){
                 
                 	.CSEG
                 _func5:
                 ; .FSTART _func5
                 ; 0004 0006 unsigned int i = 0;
                 ; 0004 0007     unsigned int number=0;
                 ; 0004 0008     unsigned int temp = 0;
                 ; 0004 0009     unsigned int sadghan=0;
                 ; 0004 000A     unsigned int dahghan=0;
                 ; 0004 000B     unsigned int yekan=0;
                 ; 0004 000C     unsigned int decimal=0;
                 ; 0004 000D     DDRA=0x00;
000172 93aa      	ST   -Y,R26
000173 9728      	SBIW R28,8
000174 e0e0      	LDI  R30,LOW(0)
000175 83e8      	ST   Y,R30
000176 83e9      	STD  Y+1,R30
000177 83ea      	STD  Y+2,R30
000178 83eb      	STD  Y+3,R30
000179 83ec      	STD  Y+4,R30
00017a 83ed      	STD  Y+5,R30
00017b 83ee      	STD  Y+6,R30
00017c 83ef      	STD  Y+7,R30
00017d 940e 0274 	CALL __SAVELOCR6
                 ;	step -> Y+14
                 ;	i -> R16,R17
                 ;	number -> R18,R19
                 ;	temp -> R20,R21
                 ;	sadghan -> Y+12
                 ;	dahghan -> Y+10
                 ;	yekan -> Y+8
                 ;	decimal -> Y+6
                +
00017f e000     +LDI R16 , LOW ( 0 )
000180 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000181 e020     +LDI R18 , LOW ( 0 )
000182 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
000183 e040     +LDI R20 , LOW ( 0 )
000184 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000185 bbea      	OUT  0x1A,R30
                 ; 0004 000E     DDRC=0xFF;
000186 efef      	LDI  R30,LOW(255)
000187 bbe4      	OUT  0x14,R30
                 ; 0004 000F     DDRD=0x00;
000188 e0e0      	LDI  R30,LOW(0)
000189 bbe1      	OUT  0x11,R30
                 ; 0004 0010     number= PINA;
00018a b329      	IN   R18,25
00018b 2733      	CLR  R19
                 ; 0004 0011     temp = number * 10;
                +
00018c e0aa     +LDI R26 , 10
00018d 9fa2     +MUL R26 , R18
00018e 01f0     +MOVW R30 , R0
00018f 9fa3     +MUL R26 , R19
000190 0df0     +ADD R31 , R0
                 	__MULBNWRU 18,19,10
000191 01af      	MOVW R20,R30
                 ; 0004 0012     while(number > 0){
                 _0x80004:
000192 2400      	CLR  R0
000193 1602      	CP   R0,R18
000194 0603      	CPC  R0,R19
000195 f008      	BRLO PC+2
000196 c06b      	RJMP _0x80006
                 ; 0004 0013         number = temp;
000197 019a      	MOVW R18,R20
                 ; 0004 0014         if(number >= 1000){
                +
000198 3e28     +CPI R18 , LOW ( 1000 )
000199 e0e3     +LDI R30 , HIGH ( 1000 )
00019a 073e     +CPC R19 , R30
                 	__CPWRN 18,19,1000
00019b f098      	BRLO _0x80007
                 ; 0004 0015             decimal = number % 10;
00019c 940e 0234 	CALL SUBOPT_0x2
00019e 940e 023a 	CALL SUBOPT_0x3
                 ; 0004 0016             number = number / 10;
                 ; 0004 0017             yekan = number % 10;
0001a0 940e 0243 	CALL SUBOPT_0x4
                 ; 0004 0018             number = number / 10;
                 ; 0004 0019             dahghan = number % 10;
0001a2 87ea      	STD  Y+10,R30
0001a3 87fb      	STD  Y+10+1,R31
                 ; 0004 001A             number = number / 10;
0001a4 01d9      	MOVW R26,R18
0001a5 e0ea      	LDI  R30,LOW(10)
0001a6 e0f0      	LDI  R31,HIGH(10)
0001a7 940e 025e 	CALL __DIVW21U
0001a9 019f      	MOVW R18,R30
                 ; 0004 001B             sadghan = number % 10;
0001aa 940e 0234 	CALL SUBOPT_0x2
0001ac 87ec      	STD  Y+12,R30
0001ad 87fd      	STD  Y+12+1,R31
                 ; 0004 001C         }
                 ; 0004 001D         else if(number >=100) {
0001ae c025      	RJMP _0x80008
                 _0x80007:
                +
0001af 3624     +CPI R18 , LOW ( 100 )
0001b0 e0e0     +LDI R30 , HIGH ( 100 )
0001b1 073e     +CPC R19 , R30
                 	__CPWRN 18,19,100
0001b2 f048      	BRLO _0x80009
                 ; 0004 001E             decimal = number % 10;
0001b3 940e 0234 	CALL SUBOPT_0x2
0001b5 940e 023a 	CALL SUBOPT_0x3
                 ; 0004 001F             number = number / 10;
                 ; 0004 0020             yekan = number % 10;
0001b7 940e 0243 	CALL SUBOPT_0x4
                 ; 0004 0021             number = number / 10;
                 ; 0004 0022             dahghan = number % 10;
0001b9 87ea      	STD  Y+10,R30
0001ba 87fb      	STD  Y+10+1,R31
                 ; 0004 0023             sadghan = 0;
0001bb c015      	RJMP _0x80022
                 ; 0004 0024         }
                 ; 0004 0025         else if(number >= 10){
                 _0x80009:
                +
0001bc 302a     +CPI R18 , LOW ( 10 )
0001bd e0e0     +LDI R30 , HIGH ( 10 )
0001be 073e     +CPC R19 , R30
                 	__CPWRN 18,19,10
0001bf f038      	BRLO _0x8000B
                 ; 0004 0026             decimal = number % 10;
0001c0 940e 0234 	CALL SUBOPT_0x2
0001c2 940e 023a 	CALL SUBOPT_0x3
                 ; 0004 0027             number = number / 10;
                 ; 0004 0028             yekan = number % 10;
0001c4 87e8      	STD  Y+8,R30
0001c5 87f9      	STD  Y+8+1,R31
                 ; 0004 0029             dahghan = 0;
0001c6 c007      	RJMP _0x80023
                 ; 0004 002A             sadghan = 0;
                 ; 0004 002B         }
                 ; 0004 002C         else{
                 _0x8000B:
                 ; 0004 002D             decimal = number % 10;
0001c7 940e 0234 	CALL SUBOPT_0x2
0001c9 83ee      	STD  Y+6,R30
0001ca 83ff      	STD  Y+6+1,R31
                 ; 0004 002E             yekan = 0;
0001cb e0e0      	LDI  R30,LOW(0)
0001cc 87e8      	STD  Y+8,R30
0001cd 87e9      	STD  Y+8+1,R30
                 ; 0004 002F             dahghan = 0;
                 _0x80023:
0001ce e0e0      	LDI  R30,LOW(0)
0001cf 87ea      	STD  Y+10,R30
0001d0 87eb      	STD  Y+10+1,R30
                 ; 0004 0030             sadghan = 0;
                 _0x80022:
0001d1 e0e0      	LDI  R30,LOW(0)
0001d2 87ec      	STD  Y+12,R30
0001d3 87ed      	STD  Y+12+1,R30
                 ; 0004 0031 
                 ; 0004 0032         }
                 _0x80008:
                 ; 0004 0033         for(i = 0; i < 25; i = i + 1)
                +
0001d4 e000     +LDI R16 , LOW ( 0 )
0001d5 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x8000E:
                +
0001d6 3109     +CPI R16 , LOW ( 25 )
0001d7 e0e0     +LDI R30 , HIGH ( 25 )
0001d8 071e     +CPC R17 , R30
                 	__CPWRN 16,17,25
0001d9 f510      	BRSH _0x8000F
                 ; 0004 0034         {
                 ; 0004 0035             DDRD.3 = 1;
0001da 9a8b      	SBI  0x11,3
                 ; 0004 0036             PORTC = array[decimal];
0001db 81ee      	LDD  R30,Y+6
0001dc 81ff      	LDD  R31,Y+6+1
0001dd 940e 024c 	CALL SUBOPT_0x5
                 ; 0004 0037             delay_ms(1);
                 ; 0004 0038 
                 ; 0004 0039             DDRD.3 = 0;
0001df 988b      	CBI  0x11,3
                 ; 0004 003A             DDRD.2 = 1;
0001e0 9a8a      	SBI  0x11,2
                 ; 0004 003B             PORTC = array[yekan] + 0b10000000;
0001e1 85e8      	LDD  R30,Y+8
0001e2 85f9      	LDD  R31,Y+8+1
0001e3 59e6      	SUBI R30,LOW(-_array)
0001e4 4ffe      	SBCI R31,HIGH(-_array)
0001e5 81e0      	LD   R30,Z
0001e6 58e0      	SUBI R30,-LOW(128)
0001e7 bbe5      	OUT  0x15,R30
                 ; 0004 003C             delay_ms(1);
0001e8 e0a1      	LDI  R26,LOW(1)
0001e9 e0b0      	LDI  R27,0
0001ea 940e 0254 	CALL _delay_ms
                 ; 0004 003D 
                 ; 0004 003E             DDRD.2 = 0;
0001ec 988a      	CBI  0x11,2
                 ; 0004 003F             DDRD.1 = 1;
0001ed 9a89      	SBI  0x11,1
                 ; 0004 0040             PORTC = array[dahghan];
0001ee 85ea      	LDD  R30,Y+10
0001ef 85fb      	LDD  R31,Y+10+1
0001f0 940e 024c 	CALL SUBOPT_0x5
                 ; 0004 0041             delay_ms(1);
                 ; 0004 0042 
                 ; 0004 0043             DDRD.1 = 0;
0001f2 9889      	CBI  0x11,1
                 ; 0004 0044             DDRD.0 = 1;
0001f3 9a88      	SBI  0x11,0
                 ; 0004 0045             PORTC = array[sadghan];
0001f4 85ec      	LDD  R30,Y+12
0001f5 85fd      	LDD  R31,Y+12+1
0001f6 940e 024c 	CALL SUBOPT_0x5
                 ; 0004 0046             delay_ms(1);
                 ; 0004 0047             DDRD.0 = 0;
0001f8 9888      	CBI  0x11,0
                 ; 0004 0048         }
                +
0001f9 5f0f     +SUBI R16 , LOW ( - 1 )
0001fa 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0001fb cfda      	RJMP _0x8000E
                 _0x8000F:
                 ; 0004 0049 
                 ; 0004 004A         DDRD.0 = 0;
0001fc 9888      	CBI  0x11,0
                 ; 0004 004B         temp = temp - step;
0001fd 85ae      	LDD  R26,Y+14
0001fe 27bb      	CLR  R27
                +
0001ff 1b4a     +SUB R20 , R26
000200 0b5b     +SBC R21 , R27
                 	__SUBWRR 20,21,26,27
                 ; 0004 004C     }
000201 cf90      	RJMP _0x80004
                 _0x80006:
                 ; 0004 004D }
000202 940e 027b 	CALL __LOADLOCR6
000204 962f      	ADIW R28,15
000205 9508      	RET
                 ; .FEND
                 ;#include <header.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;void func6(){
                 ; 0005 0003 void func6(){
                 
                 	.CSEG
                 _func6:
                 ; .FSTART _func6
                 ; 0005 0004     func1(6, 2, 500);
000206 e0e6      	LDI  R30,LOW(6)
000207 93ea      	ST   -Y,R30
000208 e0e2      	LDI  R30,LOW(2)
000209 93ea      	ST   -Y,R30
00020a efa4      	LDI  R26,LOW(500)
00020b e0b1      	LDI  R27,HIGH(500)
00020c 940e 0068 	CALL _func1
                 ; 0005 0005     func2(3,10000);
00020e e0e3      	LDI  R30,LOW(3)
00020f 93ea      	ST   -Y,R30
000210 e1a0      	LDI  R26,LOW(10000)
000211 e2b7      	LDI  R27,HIGH(10000)
000212 940e 009b 	CALL _func2
                 ; 0005 0006     func3(portA, portB);
000214 e0e1      	LDI  R30,LOW(1)
000215 93ea      	ST   -Y,R30
000216 e0a2      	LDI  R26,LOW(2)
000217 940e 00e7 	CALL _func3
                 ; 0005 0007     func4(dec,False,2);
000219 e0e0      	LDI  R30,LOW(0)
00021a 93ea      	ST   -Y,R30
00021b 93ea      	ST   -Y,R30
00021c e0a2      	LDI  R26,LOW(2)
00021d 940e 012a 	CALL _func4
                 ; 0005 0008     func5(3);
00021f e0a3      	LDI  R26,LOW(3)
000220 df51      	RCALL _func5
                 ; 0005 0009 }
000221 9508      	RET
                 ; .FEND
                 ;/*
                 ; * Lab_2_Qst6.c
                 ; *
                 ; * Created: 3/8/2021 12:55:32 AM
                 ; * Author: farkoo
                 ; */
                 ;
                 ;#include <header.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;
                 ;void main(void)
                 ; 0006 000C {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0006 000D     func6();
000222 dfe3      	RCALL _func6
                 ; 0006 000E while (1)
                 _0xC0003:
                 ; 0006 000F     {
                 ; 0006 0010     // Please write your application code here
                 ; 0006 0011 
                 ; 0006 0012     }
000223 cfff      	RJMP _0xC0003
                 ; 0006 0013 }
                 _0xC0006:
000224 cfff      	RJMP _0xC0006
                 ; .FEND
                 
                 	.DSEG
                 _array2:
000160           	.BYTE 0xA
                 _array:
00016a           	.BYTE 0xA
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
000225 e0f0      	LDI  R31,0
000226 30e1      	CPI  R30,LOW(0x1)
000227 e0a0      	LDI  R26,HIGH(0x1)
000228 07fa      	CPC  R31,R26
000229 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
00022a e6a0      	LDI  R26,LOW(_array2)
00022b e0b1      	LDI  R27,HIGH(_array2)
00022c 0fa0      	ADD  R26,R16
00022d 1fb1      	ADC  R27,R17
00022e 91ec      	LD   R30,X
00022f bbe5      	OUT  0x15,R30
000230 efa4      	LDI  R26,LOW(500)
000231 e0b1      	LDI  R27,HIGH(500)
000232 940c 0254 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:24 WORDS
                 SUBOPT_0x2:
000234 01d9      	MOVW R26,R18
000235 e0ea      	LDI  R30,LOW(10)
000236 e0f0      	LDI  R31,HIGH(10)
000237 940e 0271 	CALL __MODW21U
000239 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
00023a 83ee      	STD  Y+6,R30
00023b 83ff      	STD  Y+6+1,R31
00023c 01d9      	MOVW R26,R18
00023d e0ea      	LDI  R30,LOW(10)
00023e e0f0      	LDI  R31,HIGH(10)
00023f 940e 025e 	CALL __DIVW21U
000241 019f      	MOVW R18,R30
000242 cff1      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
000243 87e8      	STD  Y+8,R30
000244 87f9      	STD  Y+8+1,R31
000245 01d9      	MOVW R26,R18
000246 e0ea      	LDI  R30,LOW(10)
000247 e0f0      	LDI  R31,HIGH(10)
000248 940e 025e 	CALL __DIVW21U
00024a 019f      	MOVW R18,R30
00024b cfe8      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
00024c 59e6      	SUBI R30,LOW(-_array)
00024d 4ffe      	SBCI R31,HIGH(-_array)
00024e 81e0      	LD   R30,Z
00024f bbe5      	OUT  0x15,R30
000250 e0a1      	LDI  R26,LOW(1)
000251 e0b0      	LDI  R27,0
000252 940c 0254 	JMP  _delay_ms
                 
                 
                 	.CSEG
                 _delay_ms:
000254 9610      	adiw r26,0
000255 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000256 ed80     +LDI R24 , LOW ( 0x7D0 )
000257 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000258 9701     +SBIW R24 , 1
000259 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00025a 95a8      	wdr
00025b 9711      	sbiw r26,1
00025c f7c9      	brne __delay_ms0
                 __delay_ms1:
00025d 9508      	ret
                 
                 __DIVW21U:
00025e 2400      	CLR  R0
00025f 2411      	CLR  R1
000260 e190      	LDI  R25,16
                 __DIVW21U1:
000261 0faa      	LSL  R26
000262 1fbb      	ROL  R27
000263 1c00      	ROL  R0
000264 1c11      	ROL  R1
000265 1a0e      	SUB  R0,R30
000266 0a1f      	SBC  R1,R31
000267 f418      	BRCC __DIVW21U2
000268 0e0e      	ADD  R0,R30
000269 1e1f      	ADC  R1,R31
00026a c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00026b 60a1      	SBR  R26,1
                 __DIVW21U3:
00026c 959a      	DEC  R25
00026d f799      	BRNE __DIVW21U1
00026e 01fd      	MOVW R30,R26
00026f 01d0      	MOVW R26,R0
000270 9508      	RET
                 
                 __MODW21U:
000271 dfec      	RCALL __DIVW21U
000272 01fd      	MOVW R30,R26
000273 9508      	RET
                 
                 __SAVELOCR6:
000274 935a      	ST   -Y,R21
                 __SAVELOCR5:
000275 934a      	ST   -Y,R20
                 __SAVELOCR4:
000276 933a      	ST   -Y,R19
                 __SAVELOCR3:
000277 932a      	ST   -Y,R18
                 __SAVELOCR2:
000278 931a      	ST   -Y,R17
000279 930a      	ST   -Y,R16
00027a 9508      	RET
                 
                 __LOADLOCR6:
00027b 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00027c 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00027d 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00027e 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00027f 8119      	LDD  R17,Y+1
000280 8108      	LD   R16,Y
000281 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  14 r1 :   5 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  19 r17:  34 r18:  17 r19:   9 r20:   6 r21:   4 r22:   2 r23:   0 
r24:   9 r25:   5 r26:  79 r27:  17 r28:   5 r29:   1 r30: 175 r31:  51 
x  :   4 y  :  88 z  :   9 
Registers used: 20 out of 35 (57.1%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   3 
adiw  :   4 and   :   0 andi  :   0 asr   :   1 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   9 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   4 
brlt  :   0 brmi  :   0 brne  :  30 brpl  :   0 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  34 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   5 cpc   :  27 cpi   :  28 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   7 inc   :   0 jmp   :  26 ld    :   4 ldd   :  34 ldi   : 122 
lds   :   0 lpm   :   7 lsl   :   1 lsr   :   0 mov   :   0 movw  :  16 
mul   :   2 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  36 pop   :   0 push  :   0 rcall :   3 ret   :  11 
reti  :   0 rjmp  :  37 rol   :   3 ror   :   1 sbc   :   2 sbci  :   6 
sbi   :   8 sbic  :   0 sbis  :   0 sbiw  :   6 sbr   :   1 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  29 std   :  27 sts   :   0 sub   :   2 subi  :   8 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 42 out of 116 (36.2%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000504   1250     34   1284   16384   7.8%
[.dseg] 0x000060 0x000174      0     20     20    1024   2.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
