;#include <header.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <func1.h>
;
;void func1(char num, char port, int ms_delay){
; 0001 0004 void func1(char num, char port, int ms_delay){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0005     char i;
; 0001 0006     switch(port){
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	num -> Y+4
;	port -> Y+3
;	ms_delay -> Y+1
;	i -> R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0001 0007         case portA:
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0001 0008             DDRA = 0xFF;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0001 0009             break;
;PCODE: $00000017 VOL: 0
; 0001 000A         case portB:
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0001 000B             DDRB = 0xFF;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0001 000C             break;
;PCODE: $0000001D VOL: 0
; 0001 000D         case portC:
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0001 000E             DDRC = 0xFF;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0001 000F             break;
;PCODE: $00000023 VOL: 0
; 0001 0010         case portD:
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0001 0011             DDRD = 0xFF;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0001 0012             break;
;PCODE: $00000029 VOL: 0
; 0001 0013         default:
;PCODE: $0000002A VOL: 0
; 0001 0014             DDRB = 0xFF;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0001 0015     }
;PCODE: $0000002D VOL: 0
; 0001 0016     for(i = 0; i < num; i++){
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0001 0017                     PORTB = 0xFF;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0001 0018                     delay_ms(ms_delay);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0001 0019                     PORTB = 0x00;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0001 001A                     delay_ms(ms_delay);
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0001 001B     }
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0001 001C     return;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0001 001D }
;PCODE: $00000048 VOL: 0
