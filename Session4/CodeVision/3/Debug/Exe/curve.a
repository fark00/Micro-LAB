;#include <header.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;void curve(void){
; 0001 0003 void curve(void){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0004     int num;
; 0001 0005     float temp1;
; 0001 0006     int temp2;
; 0001 0007     int error;
; 0001 0008     char arr[20];
; 0001 0009     DDRA = 0x00;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	num -> R16,R17
;	temp1 -> Y+26
;	temp2 -> R18,R19
;	error -> R20,R21
;	arr -> Y+6
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0001 000A     DDRD.4 = 1;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0001 000B     DDRD.5 = 1;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0001 000C      TCNT1 = 0;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0001 000D     TCCR1A = 0x50;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0001 000E     TCCR1B = 0x0a;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0001 000F 
; 0001 0010     num = PINA;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0001 0011     temp1 = 39.0625;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0001 0012     temp1 = num*temp1;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0001 0013     temp2 = temp1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0001 0014     temp2 = temp2/2;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0001 0015     error = ((temp1 - temp2*2)/temp1)*100;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0001 0016     if(error > 9)
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0001 0017         error = 9;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0001 0018     OCR1A = temp2%256;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0001 0019     OCR1B = temp2/256;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0001 001A 
; 0001 001B     sprintf(arr,"%dUS%d",temp2*2,error);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0001 001C     lcd_puts(arr);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0001 001D 
; 0001 001E 
; 0001 001F 
; 0001 0020 
; 0001 0021 
; 0001 0022 
; 0001 0023 
; 0001 0024 }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
