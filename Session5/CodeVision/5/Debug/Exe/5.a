;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 4/14/2021
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <header.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Declare your global variables here
;int duty_cycle = 10;

	.DSEG
;int temp_counter = 1;
;int rpm_counter = 0;
;int direction = 1;
;int speed = 0;
;char temp_str[17];
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0023 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0024 // Place your code here
; 0000 0025     routin1();
;PCODE: $0000000F VOL: 0
; 0000 0026 }
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;
;// Timer2 overflow interrupt service routine
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0000 002A {
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 002B     // Reinitialize Timer2 value
; 0000 002C     TCNT2=0xB2;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 002D     // Place your code here
; 0000 002E     routin2();
;PCODE: $00000017 VOL: 0
; 0000 002F 
; 0000 0030 }
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;
;void main(void)
; 0000 0033 {
;PCODE: $0000001B VOL: 0
; 0000 0034 // Declare your local variables here
; 0000 0035 
; 0000 0036 
; 0000 0037 // Alphanumeric LCD initialization
; 0000 0038 // Connections are specified in the
; 0000 0039 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 003A // RS - PORTC Bit 0
; 0000 003B // RD - PORTC Bit 1
; 0000 003C // EN - PORTC Bit 2
; 0000 003D // D4 - PORTC Bit 4
; 0000 003E // D5 - PORTC Bit 5
; 0000 003F // D6 - PORTC Bit 6
; 0000 0040 // D7 - PORTC Bit 7
; 0000 0041 // Characters/line: 16
; 0000 0042 lcd_init(16);
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0043 
; 0000 0044 // Global enable interrupts
; 0000 0045 #asm("sei")
;PCODE: $0000001E VOL: 0
	sei
;PCODE: $0000001F VOL: 0
; 0000 0046     init_ports();
;PCODE: $00000020 VOL: 0
; 0000 0047     init_timer();
;PCODE: $00000021 VOL: 0
; 0000 0048     while (1)
;PCODE: $00000022 VOL: 0
; 0000 0049       {
; 0000 004A       // Place your code here
; 0000 004B 
; 0000 004C       }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 004D }
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
