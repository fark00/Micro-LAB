
AVRASM ver. 2.1.30  C:\users\farkoo\My Documents\Az Micro\1\Lab1_Qst_7\Debug\List\Lab1_Qst_7.asm Mon Mar 01 16:15:24 2021

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x3:
00002a 063f
00002b 4f5b
00002c 6d66
00002d 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00002e 6f7f      	.DB  0x7F,0x6F
                 _0x30:
00002f 0000
000030 0000
000031 0000
000032 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000033 0000
000034 0000
000035 0000
000036 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000037 0000      	.DB  0x0,0x0
                 
                 __GLOBAL_INI_TBL:
000038 000a      	.DW  0x0A
000039 0160      	.DW  _array
00003a 0054      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
00003b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003c 94f8      	CLI
00003d 27ee      	CLR  R30
00003e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003f e0f1      	LDI  R31,1
000040 bffb      	OUT  GICR,R31
000041 bfeb      	OUT  GICR,R30
000042 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000043 e08d      	LDI  R24,(14-2)+1
000044 e0a2      	LDI  R26,2
000045 27bb      	CLR  R27
                 __CLEAR_REG:
000046 93ed      	ST   X+,R30
000047 958a      	DEC  R24
000048 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000049 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004a e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004c 93ed      	ST   X+,R30
00004d 9701      	SBIW R24,1
00004e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004f e7e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000050 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000051 9185      	LPM  R24,Z+
000052 9195      	LPM  R25,Z+
000053 9700      	SBIW R24,0
000054 f061      	BREQ __GLOBAL_INI_END
000055 91a5      	LPM  R26,Z+
000056 91b5      	LPM  R27,Z+
000057 9005      	LPM  R0,Z+
000058 9015      	LPM  R1,Z+
000059 01bf      	MOVW R22,R30
00005a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005b 9005      	LPM  R0,Z+
00005c 920d      	ST   X+,R0
00005d 9701      	SBIW R24,1
00005e f7e1      	BRNE __GLOBAL_INI_LOOP
00005f 01fb      	MOVW R30,R22
000060 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000061 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000062 bfed      	OUT  SPL,R30
000063 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000064 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000065 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000066 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000067 940c 0069 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*
                 ; * Lab1_Qst_7.c
                 ; *
                 ; * Created: 3/1/2021 12:30:51 PM
                 ; * Author: farkoo
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;char array[]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
                 
                 	.DSEG
                 ;
                 ;void func1();
                 ;void func2();
                 ;void func3();
                 ;void func4();
                 ;void func5();
                 ;void func6();
                 ;
                 ;void main(void)
                 ; 0000 0015 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0016     func1();
000069 d007      	RCALL _func1
                 ; 0000 0017     func2();
00006a d016      	RCALL _func2
                 ; 0000 0018     func4();
00006b d03b      	RCALL _func4
                 ; 0000 0019     while (1){
                 _0x4:
                 ; 0000 001A         func3();
00006c d033      	RCALL _func3
                 ; 0000 001B         func5();
00006d d055      	RCALL _func5
                 ; 0000 001C         func6();
00006e d0b4      	RCALL _func6
                 ; 0000 001D     }
00006f cffc      	RJMP _0x4
                 ; 0000 001E }
                 _0x7:
000070 cfff      	RJMP _0x7
                 ; .FEND
                 ;
                 ;void func1(){
                 ; 0000 0020 void func1(){
                 _func1:
                 ; .FSTART _func1
                 ; 0000 0021     char i;
                 ; 0000 0022     DDRB = 0xFF;
000071 931a      	ST   -Y,R17
                 ;	i -> R17
000072 efef      	LDI  R30,LOW(255)
000073 bbe7      	OUT  0x17,R30
                 ; 0000 0023     for(i = 0; i < 4; i++){
000074 e010      	LDI  R17,LOW(0)
                 _0x9:
000075 3014      	CPI  R17,4
000076 f440      	BRSH _0xA
                 ; 0000 0024                     PORTB = 0xFF;
000077 efef      	LDI  R30,LOW(255)
000078 bbe8      	OUT  0x18,R30
                 ; 0000 0025                     delay_ms(500);
000079 d159      	RCALL SUBOPT_0x0
                 ; 0000 0026                     PORTB = 0x00;
00007a e0e0      	LDI  R30,LOW(0)
00007b bbe8      	OUT  0x18,R30
                 ; 0000 0027                     delay_ms(500);
00007c d156      	RCALL SUBOPT_0x0
                 ; 0000 0028     }
00007d 5f1f      	SUBI R17,-1
00007e cff6      	RJMP _0x9
                 _0xA:
                 ; 0000 0029     return;
00007f 9119      	LD   R17,Y+
000080 9508      	RET
                 ; 0000 002A }
                 ; .FEND
                 ;void func2(){
                 ; 0000 002B void func2(){
                 _func2:
                 ; .FSTART _func2
                 ; 0000 002C     int counter;
                 ; 0000 002D     DDRB = 0xFF;
000081 931a      	ST   -Y,R17
000082 930a      	ST   -Y,R16
                 ;	counter -> R16,R17
000083 efef      	LDI  R30,LOW(255)
000084 bbe7      	OUT  0x17,R30
                 ; 0000 002E     PORTB = 0x80;
000085 e8e0      	LDI  R30,LOW(128)
000086 bbe8      	OUT  0x18,R30
                 ; 0000 002F     counter = 0;
                +
000087 e000     +LDI R16 , LOW ( 0 )
000088 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 0030     while(counter != 3000){
                 _0xB:
000089 ebe8      	LDI  R30,LOW(3000)
00008a e0fb      	LDI  R31,HIGH(3000)
00008b 17e0      	CP   R30,R16
00008c 07f1      	CPC  R31,R17
00008d f089      	BREQ _0xD
                 ; 0000 0031               PORTB = PORTB>>1;
00008e b3e8      	IN   R30,0x18
00008f e0f0      	LDI  R31,0
000090 95f5      	ASR  R31
000091 95e7      	ROR  R30
000092 bbe8      	OUT  0x18,R30
                 ; 0000 0032               if(PORTB == 0x00)
000093 b3e8      	IN   R30,0x18
000094 30e0      	CPI  R30,0
000095 f411      	BRNE _0xE
                 ; 0000 0033                 PORTB =  0x80;
000096 e8e0      	LDI  R30,LOW(128)
000097 bbe8      	OUT  0x18,R30
                 ; 0000 0034               delay_ms(50);
                 _0xE:
000098 e3a2      	LDI  R26,LOW(50)
000099 e0b0      	LDI  R27,0
00009a 940e 024c 	CALL _delay_ms
                 ; 0000 0035               counter += 50;
                +
00009c 5c0e     +SUBI R16 , LOW ( - 50 )
00009d 4f1f     +SBCI R17 , HIGH ( - 50 )
                 	__ADDWRN 16,17,50
                 ; 0000 0036     }
00009e cfea      	RJMP _0xB
                 _0xD:
                 ; 0000 0037     return;
00009f c020      	RJMP _0x2000001
                 ; 0000 0038 }
                 ; .FEND
                 ;void func3(){
                 ; 0000 0039 void func3(){
                 _func3:
                 ; .FSTART _func3
                 ; 0000 003A     DDRA = 0x00;
0000a0 e0e0      	LDI  R30,LOW(0)
0000a1 bbea      	OUT  0x1A,R30
                 ; 0000 003B     DDRB = 0xFF;
0000a2 efef      	LDI  R30,LOW(255)
0000a3 bbe7      	OUT  0x17,R30
                 ; 0000 003C     PORTB = PINA;
0000a4 b3e9      	IN   R30,0x19
0000a5 bbe8      	OUT  0x18,R30
                 ; 0000 003D     return;
0000a6 9508      	RET
                 ; 0000 003E }
                 ; .FEND
                 ;void func4(){
                 ; 0000 003F void func4(){
                 _func4:
                 ; .FSTART _func4
                 ; 0000 0040     int i = 9;
                 ; 0000 0041     DDRC = 0xFF;
0000a7 931a      	ST   -Y,R17
0000a8 930a      	ST   -Y,R16
                 ;	i -> R16,R17
                +
0000a9 e009     +LDI R16 , LOW ( 9 )
0000aa e010     +LDI R17 , HIGH ( 9 )
                 	__GETWRN 16,17,9
0000ab efef      	LDI  R30,LOW(255)
0000ac bbe4      	OUT  0x14,R30
                 ; 0000 0042     DDRD = 0x0F;
0000ad e0ef      	LDI  R30,LOW(15)
0000ae bbe1      	OUT  0x11,R30
                 ; 0000 0043     PORTD = 0x00;
0000af e0e0      	LDI  R30,LOW(0)
0000b0 bbe2      	OUT  0x12,R30
                 ; 0000 0044      while(i !=-1){
                 _0xF:
0000b1 efef      	LDI  R30,LOW(65535)
0000b2 efff      	LDI  R31,HIGH(65535)
0000b3 17e0      	CP   R30,R16
0000b4 07f1      	CPC  R31,R17
0000b5 f051      	BREQ _0x11
                 ; 0000 0045         PORTC = array[i];
0000b6 e6a0      	LDI  R26,LOW(_array)
0000b7 e0b1      	LDI  R27,HIGH(_array)
0000b8 0fa0      	ADD  R26,R16
0000b9 1fb1      	ADC  R27,R17
0000ba 91ec      	LD   R30,X
0000bb bbe5      	OUT  0x15,R30
                 ; 0000 0046         delay_ms(500);
0000bc d116      	RCALL SUBOPT_0x0
                 ; 0000 0047         i--;
                +
0000bd 5001     +SUBI R16 , LOW ( 1 )
0000be 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 ; 0000 0048 
                 ; 0000 0049     }
0000bf cff1      	RJMP _0xF
                 _0x11:
                 ; 0000 004A }
                 _0x2000001:
0000c0 9109      	LD   R16,Y+
0000c1 9119      	LD   R17,Y+
0000c2 9508      	RET
                 ; .FEND
                 ;void func5(){
                 ; 0000 004B void func5(){
                 _func5:
                 ; .FSTART _func5
                 ; 0000 004C     unsigned int i = 0;
                 ; 0000 004D     unsigned int number=0;
                 ; 0000 004E     unsigned int temp = 0;
                 ; 0000 004F     unsigned int sadghan=0;
                 ; 0000 0050     unsigned int dahghan=0;
                 ; 0000 0051     unsigned int yekan=0;
                 ; 0000 0052     unsigned int decimal=0;
                 ; 0000 0053     DDRA=0x00;
0000c3 9728      	SBIW R28,8
0000c4 e0e0      	LDI  R30,LOW(0)
0000c5 83e8      	ST   Y,R30
0000c6 83e9      	STD  Y+1,R30
0000c7 83ea      	STD  Y+2,R30
0000c8 83eb      	STD  Y+3,R30
0000c9 83ec      	STD  Y+4,R30
0000ca 83ed      	STD  Y+5,R30
0000cb 83ee      	STD  Y+6,R30
0000cc 83ef      	STD  Y+7,R30
0000cd d109      	RCALL SUBOPT_0x1
                 ;	i -> R16,R17
                 ;	number -> R18,R19
                 ;	temp -> R20,R21
                 ;	sadghan -> Y+12
                 ;	dahghan -> Y+10
                 ;	yekan -> Y+8
                 ;	decimal -> Y+6
                 ; 0000 0054     DDRC=0xFF;
                 ; 0000 0055     DDRD=0x00;
                 ; 0000 0056     number= PINA;
                 ; 0000 0057     temp = number * 10;
                 ; 0000 0058     while(number > 0){
                 _0x12:
0000ce 2400      	CLR  R0
0000cf 1602      	CP   R0,R18
0000d0 0603      	CPC  R0,R19
0000d1 f008      	BRLO PC+2
0000d2 c04c      	RJMP _0x14
                 ; 0000 0059         number = temp;
0000d3 019a      	MOVW R18,R20
                 ; 0000 005A         if(number >= 1000){
                +
0000d4 3e28     +CPI R18 , LOW ( 1000 )
0000d5 e0e3     +LDI R30 , HIGH ( 1000 )
0000d6 073e     +CPC R19 , R30
                 	__CPWRN 18,19,1000
0000d7 f048      	BRLO _0x15
                 ; 0000 005B             decimal = number % 10;
0000d8 d115      	RCALL SUBOPT_0x2
0000d9 d11a      	RCALL SUBOPT_0x3
                 ; 0000 005C             number = number / 10;
                 ; 0000 005D             yekan = number % 10;
0000da d122      	RCALL SUBOPT_0x4
                 ; 0000 005E             number = number / 10;
                 ; 0000 005F             dahghan = number % 10;
0000db 87ea      	STD  Y+10,R30
0000dc 87fb      	STD  Y+10+1,R31
                 ; 0000 0060             number = number / 10;
0000dd d128      	RCALL SUBOPT_0x5
                 ; 0000 0061             sadghan = number % 10;
0000de 87ec      	STD  Y+12,R30
0000df 87fd      	STD  Y+12+1,R31
                 ; 0000 0062         }
                 ; 0000 0063         else if(number >=100) {
0000e0 c01f      	RJMP _0x16
                 _0x15:
                +
0000e1 3624     +CPI R18 , LOW ( 100 )
0000e2 e0e0     +LDI R30 , HIGH ( 100 )
0000e3 073e     +CPC R19 , R30
                 	__CPWRN 18,19,100
0000e4 f030      	BRLO _0x17
                 ; 0000 0064             decimal = number % 10;
0000e5 d108      	RCALL SUBOPT_0x2
0000e6 d10d      	RCALL SUBOPT_0x3
                 ; 0000 0065             number = number / 10;
                 ; 0000 0066             yekan = number % 10;
0000e7 d115      	RCALL SUBOPT_0x4
                 ; 0000 0067             number = number / 10;
                 ; 0000 0068             dahghan = number % 10;
0000e8 87ea      	STD  Y+10,R30
0000e9 87fb      	STD  Y+10+1,R31
                 ; 0000 0069             sadghan = 0;
0000ea c012      	RJMP _0x53
                 ; 0000 006A         }
                 ; 0000 006B         else if(number >= 10){
                 _0x17:
                +
0000eb 302a     +CPI R18 , LOW ( 10 )
0000ec e0e0     +LDI R30 , HIGH ( 10 )
0000ed 073e     +CPC R19 , R30
                 	__CPWRN 18,19,10
0000ee f028      	BRLO _0x19
                 ; 0000 006C             decimal = number % 10;
0000ef d0fe      	RCALL SUBOPT_0x2
0000f0 d103      	RCALL SUBOPT_0x3
                 ; 0000 006D             number = number / 10;
                 ; 0000 006E             yekan = number % 10;
0000f1 87e8      	STD  Y+8,R30
0000f2 87f9      	STD  Y+8+1,R31
                 ; 0000 006F             dahghan = 0;
0000f3 c006      	RJMP _0x54
                 ; 0000 0070             sadghan = 0;
                 ; 0000 0071         }
                 ; 0000 0072         else{
                 _0x19:
                 ; 0000 0073             decimal = number % 10;
0000f4 d0f9      	RCALL SUBOPT_0x2
0000f5 83ee      	STD  Y+6,R30
0000f6 83ff      	STD  Y+6+1,R31
                 ; 0000 0074             yekan = 0;
0000f7 e0e0      	LDI  R30,LOW(0)
0000f8 87e8      	STD  Y+8,R30
0000f9 87e9      	STD  Y+8+1,R30
                 ; 0000 0075             dahghan = 0;
                 _0x54:
0000fa e0e0      	LDI  R30,LOW(0)
0000fb 87ea      	STD  Y+10,R30
0000fc 87eb      	STD  Y+10+1,R30
                 ; 0000 0076             sadghan = 0;
                 _0x53:
0000fd e0e0      	LDI  R30,LOW(0)
0000fe 87ec      	STD  Y+12,R30
0000ff 87ed      	STD  Y+12+1,R30
                 ; 0000 0077 
                 ; 0000 0078         }
                 _0x16:
                 ; 0000 0079         for(i = 0; i < 25; i = i + 1)
                +
000100 e000     +LDI R16 , LOW ( 0 )
000101 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x1C:
                +
000102 3109     +CPI R16 , LOW ( 25 )
000103 e0e0     +LDI R30 , HIGH ( 25 )
000104 071e     +CPC R17 , R30
                 	__CPWRN 16,17,25
000105 f4a8      	BRSH _0x1D
                 ; 0000 007A         {
                 ; 0000 007B             DDRD.3 = 1;
000106 9a8b      	SBI  0x11,3
                 ; 0000 007C             PORTC = array[decimal];
000107 81ee      	LDD  R30,Y+6
000108 81ff      	LDD  R31,Y+6+1
000109 d103      	RCALL SUBOPT_0x6
                 ; 0000 007D             delay_ms(1);
                 ; 0000 007E 
                 ; 0000 007F             DDRD.3 = 0;
00010a 988b      	CBI  0x11,3
                 ; 0000 0080             DDRD.2 = 1;
00010b 9a8a      	SBI  0x11,2
                 ; 0000 0081             PORTC = array[yekan] + 0b10000000;
00010c 85e8      	LDD  R30,Y+8
00010d 85f9      	LDD  R31,Y+8+1
00010e d106      	RCALL SUBOPT_0x7
                 ; 0000 0082             delay_ms(1);
                 ; 0000 0083 
                 ; 0000 0084             DDRD.2 = 0;
                 ; 0000 0085             DDRD.1 = 1;
                 ; 0000 0086             PORTC = array[dahghan];
00010f 85ea      	LDD  R30,Y+10
000110 85fb      	LDD  R31,Y+10+1
000111 d0fb      	RCALL SUBOPT_0x6
                 ; 0000 0087             delay_ms(1);
                 ; 0000 0088 
                 ; 0000 0089             DDRD.1 = 0;
000112 9889      	CBI  0x11,1
                 ; 0000 008A             DDRD.0 = 1;
000113 9a88      	SBI  0x11,0
                 ; 0000 008B             PORTC = array[sadghan];
000114 85ec      	LDD  R30,Y+12
000115 85fd      	LDD  R31,Y+12+1
000116 d0f6      	RCALL SUBOPT_0x6
                 ; 0000 008C             delay_ms(1);
                 ; 0000 008D             DDRD.0 = 0;
000117 9888      	CBI  0x11,0
                 ; 0000 008E         }
                +
000118 5f0f     +SUBI R16 , LOW ( - 1 )
000119 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00011a cfe7      	RJMP _0x1C
                 _0x1D:
                 ; 0000 008F 
                 ; 0000 0090         DDRD.0 = 0;
00011b 9888      	CBI  0x11,0
                 ; 0000 0091         temp = temp - 2;
                +
00011c 5042     +SUBI R20 , LOW ( 2 )
00011d 4050     +SBCI R21 , HIGH ( 2 )
                 	__SUBWRN 20,21,2
                 ; 0000 0092     }
00011e cfaf      	RJMP _0x12
                 _0x14:
                 ; 0000 0093 
                 ; 0000 0094 }
00011f 940e 0281 	CALL __LOADLOCR6
000121 962e      	ADIW R28,14
000122 9508      	RET
                 ; .FEND
                 ;void func6(){
                 ; 0000 0095 void func6(){
                 _func6:
                 ; .FSTART _func6
                 ; 0000 0096     unsigned int i = 0;
                 ; 0000 0097     unsigned int number=0;
                 ; 0000 0098     unsigned int temp = 0;
                 ; 0000 0099     unsigned int sadghan=0;
                 ; 0000 009A     unsigned int dahghan=0;
                 ; 0000 009B     unsigned int yekan=0;
                 ; 0000 009C     unsigned int decimal=0;
                 ; 0000 009D 
                 ; 0000 009E     unsigned int sadghan_tmp=0;
                 ; 0000 009F     unsigned int dahghan_tmp=0;
                 ; 0000 00A0     unsigned int yekan_tmp=0;
                 ; 0000 00A1     unsigned int decimal_tmp=0;
                 ; 0000 00A2     unsigned int number_tmp = 0;
                 ; 0000 00A3 
                 ; 0000 00A4     DDRA=0x00;
000123 9762      	SBIW R28,18
000124 e182      	LDI  R24,18
000125 e0a0      	LDI  R26,LOW(0)
000126 e0b0      	LDI  R27,HIGH(0)
000127 e5ee      	LDI  R30,LOW(_0x30*2)
000128 e0f0      	LDI  R31,HIGH(_0x30*2)
000129 940e 0288 	CALL __INITLOCB
00012b d0ab      	RCALL SUBOPT_0x1
                 ;	i -> R16,R17
                 ;	number -> R18,R19
                 ;	temp -> R20,R21
                 ;	sadghan -> Y+22
                 ;	dahghan -> Y+20
                 ;	yekan -> Y+18
                 ;	decimal -> Y+16
                 ;	sadghan_tmp -> Y+14
                 ;	dahghan_tmp -> Y+12
                 ;	yekan_tmp -> Y+10
                 ;	decimal_tmp -> Y+8
                 ;	number_tmp -> Y+6
                 ; 0000 00A5     DDRC=0xFF;
                 ; 0000 00A6     DDRD=0x00;
                 ; 0000 00A7     number= PINA;
                 ; 0000 00A8     temp = number * 10;
                 ; 0000 00A9 
                 ; 0000 00AA     number_tmp = temp;
                +
00012c 834e     +STD Y + 6 , R20
00012d 835f     +STD Y + 6 + 1 , R21
                 	__PUTWSR 20,21,6
                 ; 0000 00AB     decimal_tmp = number_tmp % 10;
00012e d0f2      	RCALL SUBOPT_0x8
00012f 940e 0277 	CALL __MODW21U
000131 87e8      	STD  Y+8,R30
000132 87f9      	STD  Y+8+1,R31
                 ; 0000 00AC     number_tmp = number_tmp / 10;
000133 d0ed      	RCALL SUBOPT_0x8
000134 d0f1      	RCALL SUBOPT_0x9
                 ; 0000 00AD     yekan_tmp = number_tmp % 10;
000135 940e 0277 	CALL __MODW21U
000137 87ea      	STD  Y+10,R30
000138 87fb      	STD  Y+10+1,R31
                 ; 0000 00AE     number_tmp = number_tmp / 10;
000139 d0e7      	RCALL SUBOPT_0x8
00013a d0eb      	RCALL SUBOPT_0x9
                 ; 0000 00AF     dahghan_tmp = number_tmp % 10;
00013b 940e 0277 	CALL __MODW21U
00013d 87ec      	STD  Y+12,R30
00013e 87fd      	STD  Y+12+1,R31
                 ; 0000 00B0     number_tmp = number_tmp / 10;
00013f d0e1      	RCALL SUBOPT_0x8
000140 d0e5      	RCALL SUBOPT_0x9
                 ; 0000 00B1     sadghan_tmp = number_tmp % 10;
000141 940e 0277 	CALL __MODW21U
000143 87ee      	STD  Y+14,R30
000144 87ff      	STD  Y+14+1,R31
                 ; 0000 00B2 
                 ; 0000 00B3     while(number > 0){
                 _0x31:
000145 2400      	CLR  R0
000146 1602      	CP   R0,R18
000147 0603      	CPC  R0,R19
000148 f008      	BRLO PC+2
000149 c085      	RJMP _0x33
                 ; 0000 00B4         number = temp;
00014a 019a      	MOVW R18,R20
                 ; 0000 00B5         if(number >= 1000){
                +
00014b 3e28     +CPI R18 , LOW ( 1000 )
00014c e0e3     +LDI R30 , HIGH ( 1000 )
00014d 073e     +CPC R19 , R30
                 	__CPWRN 18,19,1000
00014e f058      	BRLO _0x34
                 ; 0000 00B6             decimal = number % 10;
00014f d09e      	RCALL SUBOPT_0x2
000150 d0da      	RCALL SUBOPT_0xA
                 ; 0000 00B7             number = number / 10;
                 ; 0000 00B8             yekan = number % 10;
000151 8bea      	STD  Y+18,R30
000152 8bfb      	STD  Y+18+1,R31
                 ; 0000 00B9             number = number / 10;
000153 d0b2      	RCALL SUBOPT_0x5
                 ; 0000 00BA             dahghan = number % 10;
000154 8bec      	STD  Y+20,R30
000155 8bfd      	STD  Y+20+1,R31
                 ; 0000 00BB             number = number / 10;
000156 d0af      	RCALL SUBOPT_0x5
                 ; 0000 00BC             sadghan = number % 10;
000157 8bee      	STD  Y+22,R30
000158 8bff      	STD  Y+22+1,R31
                 ; 0000 00BD         }
                 ; 0000 00BE         else if(number >=100) {
000159 c021      	RJMP _0x35
                 _0x34:
                +
00015a 3624     +CPI R18 , LOW ( 100 )
00015b e0e0     +LDI R30 , HIGH ( 100 )
00015c 073e     +CPC R19 , R30
                 	__CPWRN 18,19,100
00015d f040      	BRLO _0x36
                 ; 0000 00BF             decimal = number % 10;
00015e d08f      	RCALL SUBOPT_0x2
00015f d0cb      	RCALL SUBOPT_0xA
                 ; 0000 00C0             number = number / 10;
                 ; 0000 00C1             yekan = number % 10;
000160 8bea      	STD  Y+18,R30
000161 8bfb      	STD  Y+18+1,R31
                 ; 0000 00C2             number = number / 10;
000162 d0a3      	RCALL SUBOPT_0x5
                 ; 0000 00C3             dahghan = number % 10;
000163 8bec      	STD  Y+20,R30
000164 8bfd      	STD  Y+20+1,R31
                 ; 0000 00C4             sadghan = 0;
000165 c012      	RJMP _0x55
                 ; 0000 00C5         }
                 ; 0000 00C6         else if(number >= 10){
                 _0x36:
                +
000166 302a     +CPI R18 , LOW ( 10 )
000167 e0e0     +LDI R30 , HIGH ( 10 )
000168 073e     +CPC R19 , R30
                 	__CPWRN 18,19,10
000169 f028      	BRLO _0x38
                 ; 0000 00C7             decimal = number % 10;
00016a d083      	RCALL SUBOPT_0x2
00016b d0bf      	RCALL SUBOPT_0xA
                 ; 0000 00C8             number = number / 10;
                 ; 0000 00C9             yekan = number % 10;
00016c 8bea      	STD  Y+18,R30
00016d 8bfb      	STD  Y+18+1,R31
                 ; 0000 00CA             dahghan = 0;
00016e c006      	RJMP _0x56
                 ; 0000 00CB             sadghan = 0;
                 ; 0000 00CC         }
                 ; 0000 00CD         else{
                 _0x38:
                 ; 0000 00CE             decimal = number % 10;
00016f d07e      	RCALL SUBOPT_0x2
000170 8be8      	STD  Y+16,R30
000171 8bf9      	STD  Y+16+1,R31
                 ; 0000 00CF             yekan = 0;
000172 e0e0      	LDI  R30,LOW(0)
000173 8bea      	STD  Y+18,R30
000174 8beb      	STD  Y+18+1,R30
                 ; 0000 00D0             dahghan = 0;
                 _0x56:
000175 e0e0      	LDI  R30,LOW(0)
000176 8bec      	STD  Y+20,R30
000177 8bed      	STD  Y+20+1,R30
                 ; 0000 00D1             sadghan = 0;
                 _0x55:
000178 e0e0      	LDI  R30,LOW(0)
000179 8bee      	STD  Y+22,R30
00017a 8bef      	STD  Y+22+1,R30
                 ; 0000 00D2 
                 ; 0000 00D3         }
                 _0x35:
                 ; 0000 00D4 
                 ; 0000 00D5         for(i = 0; i < 25; i = i + 1)
                +
00017b e000     +LDI R16 , LOW ( 0 )
00017c e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x3B:
                +
00017d 3109     +CPI R16 , LOW ( 25 )
00017e e0e0     +LDI R30 , HIGH ( 25 )
00017f 071e     +CPC R17 , R30
                 	__CPWRN 16,17,25
000180 f4a8      	BRSH _0x3C
                 ; 0000 00D6         {
                 ; 0000 00D7             DDRD.3 = 1;
000181 9a8b      	SBI  0x11,3
                 ; 0000 00D8             PORTC = array[decimal];
000182 89e8      	LDD  R30,Y+16
000183 89f9      	LDD  R31,Y+16+1
000184 d088      	RCALL SUBOPT_0x6
                 ; 0000 00D9             delay_ms(1);
                 ; 0000 00DA 
                 ; 0000 00DB             DDRD.3 = 0;
000185 988b      	CBI  0x11,3
                 ; 0000 00DC             DDRD.2 = 1;
000186 9a8a      	SBI  0x11,2
                 ; 0000 00DD             PORTC = array[yekan] + 0b10000000;
000187 89ea      	LDD  R30,Y+18
000188 89fb      	LDD  R31,Y+18+1
000189 d08b      	RCALL SUBOPT_0x7
                 ; 0000 00DE             delay_ms(1);
                 ; 0000 00DF 
                 ; 0000 00E0             DDRD.2 = 0;
                 ; 0000 00E1             DDRD.1 = 1;
                 ; 0000 00E2             PORTC = array[dahghan];
00018a 89ec      	LDD  R30,Y+20
00018b 89fd      	LDD  R31,Y+20+1
00018c d080      	RCALL SUBOPT_0x6
                 ; 0000 00E3             delay_ms(1);
                 ; 0000 00E4 
                 ; 0000 00E5             DDRD.1 = 0;
00018d 9889      	CBI  0x11,1
                 ; 0000 00E6             DDRD.0 = 1;
00018e 9a88      	SBI  0x11,0
                 ; 0000 00E7             PORTC = array[sadghan];
00018f 89ee      	LDD  R30,Y+22
000190 89ff      	LDD  R31,Y+22+1
000191 d07b      	RCALL SUBOPT_0x6
                 ; 0000 00E8             delay_ms(1);
                 ; 0000 00E9             DDRD.0 = 0;
000192 9888      	CBI  0x11,0
                 ; 0000 00EA         }
                +
000193 5f0f     +SUBI R16 , LOW ( - 1 )
000194 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000195 cfe7      	RJMP _0x3B
                 _0x3C:
                 ; 0000 00EB 
                 ; 0000 00EC         DDRD.0 = 0;
000196 9888      	CBI  0x11,0
                 ; 0000 00ED         temp = temp - 2;
                +
000197 5042     +SUBI R20 , LOW ( 2 )
000198 4050     +SBCI R21 , HIGH ( 2 )
                 	__SUBWRN 20,21,2
                 ; 0000 00EE 
                 ; 0000 00EF         if(PIND.7 == 0)
000199 9987      	SBIC 0x10,7
00019a c002      	RJMP _0x4F
                 ; 0000 00F0         {
                 ; 0000 00F1             temp = sadghan_tmp * 1000 + dahghan * 100 + yekan * 10 + decimal - 2;
00019b d092      	RCALL SUBOPT_0xB
00019c d0a1      	RCALL SUBOPT_0xC
                 ; 0000 00F2         }
                 ; 0000 00F3         if(PIND.6 == 0)
                 _0x4F:
00019d 9986      	SBIC 0x10,6
00019e c010      	RJMP _0x50
                 ; 0000 00F4         {
                 ; 0000 00F5             temp = sadghan * 1000 + dahghan_tmp * 100 + yekan * 10 + decimal - 2;
00019f 89ee      	LDD  R30,Y+22
0001a0 89ff      	LDD  R31,Y+22+1
0001a1 eea8      	LDI  R26,LOW(1000)
0001a2 e0b3      	LDI  R27,HIGH(1000)
0001a3 940e 0256 	CALL __MULW12U
                +
0001a5 2f7e     +MOV R23 , R30
0001a6 2f8f     +MOV R24 , R31
                 	__PUTW1R 23,24
0001a7 85ac      	LDD  R26,Y+12
0001a8 85bd      	LDD  R27,Y+12+1
0001a9 e6e4      	LDI  R30,LOW(100)
0001aa 940e 025e 	CALL __MULB1W2U
                +
0001ac 0f7e     +ADD R23 , R30
0001ad 1f8f     +ADC R24 , R31
                 	__ADDWRR 23,24,30,31
0001ae d08f      	RCALL SUBOPT_0xC
                 ; 0000 00F6         }
                 ; 0000 00F7         if(PIND.5 == 0)
                 _0x50:
0001af 9985      	SBIC 0x10,5
0001b0 c00e      	RJMP _0x51
                 ; 0000 00F8         {
                 ; 0000 00F9             temp = sadghan_tmp * 1000 + dahghan * 100 + yekan_tmp * 10 + decimal - 2;
0001b1 d07c      	RCALL SUBOPT_0xB
0001b2 85aa      	LDD  R26,Y+10
0001b3 85bb      	LDD  R27,Y+10+1
0001b4 e0ea      	LDI  R30,LOW(10)
0001b5 940e 025e 	CALL __MULB1W2U
0001b7 0fe7      	ADD  R30,R23
0001b8 1ff8      	ADC  R31,R24
0001b9 89a8      	LDD  R26,Y+16
0001ba 89b9      	LDD  R27,Y+16+1
0001bb 0fae      	ADD  R26,R30
0001bc 1fbf      	ADC  R27,R31
0001bd 9712      	SBIW R26,2
0001be 01ad      	MOVW R20,R26
                 ; 0000 00FA         }
                 ; 0000 00FB         if(PIND.4 == 0)
                 _0x51:
0001bf 9984      	SBIC 0x10,4
0001c0 c00d      	RJMP _0x52
                 ; 0000 00FC         {
                 ; 0000 00FD             temp = sadghan_tmp * 1000 + dahghan * 100 + yekan * 10 + decimal_tmp;
0001c1 d06c      	RCALL SUBOPT_0xB
0001c2 89aa      	LDD  R26,Y+18
0001c3 89bb      	LDD  R27,Y+18+1
0001c4 e0ea      	LDI  R30,LOW(10)
0001c5 940e 025e 	CALL __MULB1W2U
0001c7 0fe7      	ADD  R30,R23
0001c8 1ff8      	ADC  R31,R24
0001c9 85a8      	LDD  R26,Y+8
0001ca 85b9      	LDD  R27,Y+8+1
0001cb 0fea      	ADD  R30,R26
0001cc 1ffb      	ADC  R31,R27
0001cd 01af      	MOVW R20,R30
                 ; 0000 00FE         }
                 ; 0000 00FF     }
                 _0x52:
0001ce cf76      	RJMP _0x31
                 _0x33:
                 ; 0000 0100 
                 ; 0000 0101 }
0001cf 940e 0281 	CALL __LOADLOCR6
0001d1 9668      	ADIW R28,24
0001d2 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _array:
000160           	.BYTE 0xA
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0001d3 efa4      	LDI  R26,LOW(500)
0001d4 e0b1      	LDI  R27,HIGH(500)
0001d5 940c 024c 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x1:
0001d7 940e 027a 	CALL __SAVELOCR6
                +
0001d9 e000     +LDI R16 , LOW ( 0 )
0001da e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0001db e020     +LDI R18 , LOW ( 0 )
0001dc e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
0001dd e040     +LDI R20 , LOW ( 0 )
0001de e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
0001df e0e0      	LDI  R30,LOW(0)
0001e0 bbea      	OUT  0x1A,R30
0001e1 efef      	LDI  R30,LOW(255)
0001e2 bbe4      	OUT  0x14,R30
0001e3 e0e0      	LDI  R30,LOW(0)
0001e4 bbe1      	OUT  0x11,R30
0001e5 b329      	IN   R18,25
0001e6 2733      	CLR  R19
                +
0001e7 e0aa     +LDI R26 , 10
0001e8 9fa2     +MUL R26 , R18
0001e9 01f0     +MOVW R30 , R0
0001ea 9fa3     +MUL R26 , R19
0001eb 0df0     +ADD R31 , R0
                 	__MULBNWRU 18,19,10
0001ec 01af      	MOVW R20,R30
0001ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 20 TIMES, CODE SIZE REDUCTION:54 WORDS
                 SUBOPT_0x2:
0001ee 01d9      	MOVW R26,R18
0001ef e0ea      	LDI  R30,LOW(10)
0001f0 e0f0      	LDI  R31,HIGH(10)
0001f1 940e 0277 	CALL __MODW21U
0001f3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
0001f4 83ee      	STD  Y+6,R30
0001f5 83ff      	STD  Y+6+1,R31
0001f6 01d9      	MOVW R26,R18
0001f7 e0ea      	LDI  R30,LOW(10)
0001f8 e0f0      	LDI  R31,HIGH(10)
0001f9 940e 0264 	CALL __DIVW21U
0001fb 019f      	MOVW R18,R30
0001fc cff1      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
0001fd 87e8      	STD  Y+8,R30
0001fe 87f9      	STD  Y+8+1,R31
0001ff 01d9      	MOVW R26,R18
000200 e0ea      	LDI  R30,LOW(10)
000201 e0f0      	LDI  R31,HIGH(10)
000202 940e 0264 	CALL __DIVW21U
000204 019f      	MOVW R18,R30
000205 cfe8      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x5:
000206 01d9      	MOVW R26,R18
000207 e0ea      	LDI  R30,LOW(10)
000208 e0f0      	LDI  R31,HIGH(10)
000209 940e 0264 	CALL __DIVW21U
00020b 019f      	MOVW R18,R30
00020c cfe1      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x6:
00020d 5ae0      	SUBI R30,LOW(-_array)
00020e 4ffe      	SBCI R31,HIGH(-_array)
00020f 81e0      	LD   R30,Z
000210 bbe5      	OUT  0x15,R30
000211 e0a1      	LDI  R26,LOW(1)
000212 e0b0      	LDI  R27,0
000213 940c 024c 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x7:
000215 5ae0      	SUBI R30,LOW(-_array)
000216 4ffe      	SBCI R31,HIGH(-_array)
000217 81e0      	LD   R30,Z
000218 58e0      	SUBI R30,-LOW(128)
000219 bbe5      	OUT  0x15,R30
00021a e0a1      	LDI  R26,LOW(1)
00021b e0b0      	LDI  R27,0
00021c 940e 024c 	CALL _delay_ms
00021e 988a      	CBI  0x11,2
00021f 9a89      	SBI  0x11,1
000220 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x8:
000221 81ae      	LDD  R26,Y+6
000222 81bf      	LDD  R27,Y+6+1
000223 e0ea      	LDI  R30,LOW(10)
000224 e0f0      	LDI  R31,HIGH(10)
000225 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x9:
000226 940e 0264 	CALL __DIVW21U
000228 83ee      	STD  Y+6,R30
000229 83ff      	STD  Y+6+1,R31
00022a cff6      	RJMP SUBOPT_0x8
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
00022b 8be8      	STD  Y+16,R30
00022c 8bf9      	STD  Y+16+1,R31
00022d cfd8      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0xB:
00022e 85ee      	LDD  R30,Y+14
00022f 85ff      	LDD  R31,Y+14+1
000230 eea8      	LDI  R26,LOW(1000)
000231 e0b3      	LDI  R27,HIGH(1000)
000232 940e 0256 	CALL __MULW12U
                +
000234 2f7e     +MOV R23 , R30
000235 2f8f     +MOV R24 , R31
                 	__PUTW1R 23,24
000236 89ac      	LDD  R26,Y+20
000237 89bd      	LDD  R27,Y+20+1
000238 e6e4      	LDI  R30,LOW(100)
000239 940e 025e 	CALL __MULB1W2U
                +
00023b 0f7e     +ADD R23 , R30
00023c 1f8f     +ADC R24 , R31
                 	__ADDWRR 23,24,30,31
00023d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0xC:
00023e 89aa      	LDD  R26,Y+18
00023f 89bb      	LDD  R27,Y+18+1
000240 e0ea      	LDI  R30,LOW(10)
000241 940e 025e 	CALL __MULB1W2U
000243 0fe7      	ADD  R30,R23
000244 1ff8      	ADC  R31,R24
000245 89a8      	LDD  R26,Y+16
000246 89b9      	LDD  R27,Y+16+1
000247 0fae      	ADD  R26,R30
000248 1fbf      	ADC  R27,R31
000249 9712      	SBIW R26,2
00024a 01ad      	MOVW R20,R26
00024b 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00024c 9610      	adiw r26,0
00024d f039      	breq __delay_ms1
                 __delay_ms0:
                +
00024e ed80     +LDI R24 , LOW ( 0x7D0 )
00024f e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000250 9701     +SBIW R24 , 1
000251 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000252 95a8      	wdr
000253 9711      	sbiw r26,1
000254 f7c9      	brne __delay_ms0
                 __delay_ms1:
000255 9508      	ret
                 
                 __MULW12U:
000256 9ffa      	MUL  R31,R26
000257 2df0      	MOV  R31,R0
000258 9feb      	MUL  R30,R27
000259 0df0      	ADD  R31,R0
00025a 9fea      	MUL  R30,R26
00025b 2de0      	MOV  R30,R0
00025c 0df1      	ADD  R31,R1
00025d 9508      	RET
                 
                 __MULB1W2U:
00025e 2f6e      	MOV  R22,R30
00025f 9f6a      	MUL  R22,R26
000260 01f0      	MOVW R30,R0
000261 9f6b      	MUL  R22,R27
000262 0df0      	ADD  R31,R0
000263 9508      	RET
                 
                 __DIVW21U:
000264 2400      	CLR  R0
000265 2411      	CLR  R1
000266 e190      	LDI  R25,16
                 __DIVW21U1:
000267 0faa      	LSL  R26
000268 1fbb      	ROL  R27
000269 1c00      	ROL  R0
00026a 1c11      	ROL  R1
00026b 1a0e      	SUB  R0,R30
00026c 0a1f      	SBC  R1,R31
00026d f418      	BRCC __DIVW21U2
00026e 0e0e      	ADD  R0,R30
00026f 1e1f      	ADC  R1,R31
000270 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000271 60a1      	SBR  R26,1
                 __DIVW21U3:
000272 959a      	DEC  R25
000273 f799      	BRNE __DIVW21U1
000274 01fd      	MOVW R30,R26
000275 01d0      	MOVW R26,R0
000276 9508      	RET
                 
                 __MODW21U:
000277 dfec      	RCALL __DIVW21U
000278 01fd      	MOVW R30,R26
000279 9508      	RET
                 
                 __SAVELOCR6:
00027a 935a      	ST   -Y,R21
                 __SAVELOCR5:
00027b 934a      	ST   -Y,R20
                 __SAVELOCR4:
00027c 933a      	ST   -Y,R19
                 __SAVELOCR3:
00027d 932a      	ST   -Y,R18
                 __SAVELOCR2:
00027e 931a      	ST   -Y,R17
00027f 930a      	ST   -Y,R16
000280 9508      	RET
                 
                 __LOADLOCR6:
000281 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000282 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000283 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000284 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000285 8119      	LDD  R17,Y+1
000286 8108      	LD   R16,Y
000287 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000288 0fac      	ADD  R26,R28
000289 1fbd      	ADC  R27,R29
                 __INITLOC0:
00028a 9005      	LPM  R0,Z+
00028b 920d      	ST   X+,R0
00028c 958a      	DEC  R24
00028d f7e1      	BRNE __INITLOC0
00028e 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  24 r1 :   6 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  19 r17:  24 r18:  22 r19:  13 r20:  12 r21:   6 r22:   5 r23:   7 
r24:  18 r25:   5 r26:  46 r27:  27 r28:   6 r29:   2 r30: 171 r31:  65 
x  :   5 y  : 120 z  :  10 
Registers used: 21 out of 35 (60.0%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  11 add   :  15 
adiw  :   3 and   :   0 andi  :   0 asr   :   1 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   4 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   0 brne  :   8 brpl  :   0 brsh  :   3 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  22 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   4 cpc   :  12 cpi   :  10 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   4 inc   :   0 jmp   :  24 ld    :   7 ldd   :  43 ldi   :  99 
lds   :   0 lpm   :   8 lsl   :   1 lsr   :   0 mov   :   7 movw  :  21 
mul   :   7 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  25 pop   :   0 push  :   0 rcall :  52 ret   :  19 
reti  :   0 rjmp  :  29 rol   :   3 ror   :   1 sbc   :   1 sbci  :   8 
sbi   :   7 sbic  :   4 sbis  :   0 sbiw  :   9 sbr   :   1 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  16 std   :  61 sts   :   0 sub   :   1 subi  :  10 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 44 out of 116 (37.9%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00051e   1274     36   1310   16384   8.0%
[.dseg] 0x000060 0x00016a      0     10     10    1024   1.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
