
AVRASM ver. 2.1.30  C:\users\farkoo\My Documents\Az Micro\1\Lab1_Qst_6\Debug\List\Lab1_Qst_6.asm Mon Mar 01 16:10:35 2021

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003c 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x3:
00002a 063f
00002b 4f5b
00002c 6d66
00002d 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00002e 6f7f      	.DB  0x7F,0x6F
                 _0x8:
00002f 0000
000030 0000
000031 0000
000032 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000033 0000
000034 0000
000035 0000
000036 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000037 0000      	.DB  0x0,0x0
                 
                 __GLOBAL_INI_TBL:
000038 000a      	.DW  0x0A
000039 0160      	.DW  _array
00003a 0054      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
00003b 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003c 94f8      	CLI
00003d 27ee      	CLR  R30
00003e bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003f e0f1      	LDI  R31,1
000040 bffb      	OUT  GICR,R31
000041 bfeb      	OUT  GICR,R30
000042 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000043 e08d      	LDI  R24,(14-2)+1
000044 e0a2      	LDI  R26,2
000045 27bb      	CLR  R27
                 __CLEAR_REG:
000046 93ed      	ST   X+,R30
000047 958a      	DEC  R24
000048 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000049 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004a e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004c 93ed      	ST   X+,R30
00004d 9701      	SBIW R24,1
00004e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004f e7e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000050 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000051 9185      	LPM  R24,Z+
000052 9195      	LPM  R25,Z+
000053 9700      	SBIW R24,0
000054 f061      	BREQ __GLOBAL_INI_END
000055 91a5      	LPM  R26,Z+
000056 91b5      	LPM  R27,Z+
000057 9005      	LPM  R0,Z+
000058 9015      	LPM  R1,Z+
000059 01bf      	MOVW R22,R30
00005a 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005b 9005      	LPM  R0,Z+
00005c 920d      	ST   X+,R0
00005d 9701      	SBIW R24,1
00005e f7e1      	BRNE __GLOBAL_INI_LOOP
00005f 01fb      	MOVW R30,R22
000060 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000061 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000062 bfed      	OUT  SPL,R30
000063 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000064 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000065 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000066 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000067 940c 0069 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*
                 ; * Lab1_Qst_6.c
                 ; *
                 ; * Created: 2/28/2021 12:40:29 PM
                 ; * Author: farkoo
                 ; */
                 ;
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;// char array[]={0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xF8,0x80,0x90};
                 ;char array[]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F};
                 
                 	.DSEG
                 ;
                 ;
                 ;void func6();
                 ;
                 ;void main(void)
                 ; 0000 0012 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0013     func6();
000069 d002      	RCALL _func6
                 ; 0000 0014     while(1);
                 _0x4:
00006a cfff      	RJMP _0x4
                 ; 0000 0015     return;
                 _0x7:
00006b cfff      	RJMP _0x7
                 ; 0000 0016 }
                 ; .FEND
                 ;
                 ;void func6(){
                 ; 0000 0018 void func6(){
                 _func6:
                 ; .FSTART _func6
                 ; 0000 0019     unsigned int i = 0;
                 ; 0000 001A     unsigned int number=0;
                 ; 0000 001B     unsigned int temp = 0;
                 ; 0000 001C     unsigned int sadghan=0;
                 ; 0000 001D     unsigned int dahghan=0;
                 ; 0000 001E     unsigned int yekan=0;
                 ; 0000 001F     unsigned int decimal=0;
                 ; 0000 0020 
                 ; 0000 0021     unsigned int sadghan_tmp=0;
                 ; 0000 0022     unsigned int dahghan_tmp=0;
                 ; 0000 0023     unsigned int yekan_tmp=0;
                 ; 0000 0024     unsigned int decimal_tmp=0;
                 ; 0000 0025     unsigned int number_tmp = 0;
                 ; 0000 0026 
                 ; 0000 0027     DDRA=0x00;
00006c 9762      	SBIW R28,18
00006d e182      	LDI  R24,18
00006e e0a0      	LDI  R26,LOW(0)
00006f e0b0      	LDI  R27,HIGH(0)
000070 e5ee      	LDI  R30,LOW(_0x8*2)
000071 e0f0      	LDI  R31,HIGH(_0x8*2)
000072 940e 01c1 	CALL __INITLOCB
000074 940e 01b3 	CALL __SAVELOCR6
                 ;	i -> R16,R17
                 ;	number -> R18,R19
                 ;	temp -> R20,R21
                 ;	sadghan -> Y+22
                 ;	dahghan -> Y+20
                 ;	yekan -> Y+18
                 ;	decimal -> Y+16
                 ;	sadghan_tmp -> Y+14
                 ;	dahghan_tmp -> Y+12
                 ;	yekan_tmp -> Y+10
                 ;	decimal_tmp -> Y+8
                 ;	number_tmp -> Y+6
                +
000076 e000     +LDI R16 , LOW ( 0 )
000077 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
000078 e020     +LDI R18 , LOW ( 0 )
000079 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                +
00007a e040     +LDI R20 , LOW ( 0 )
00007b e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
00007c e0e0      	LDI  R30,LOW(0)
00007d bbea      	OUT  0x1A,R30
                 ; 0000 0028     DDRC=0xFF;
00007e efef      	LDI  R30,LOW(255)
00007f bbe4      	OUT  0x14,R30
                 ; 0000 0029     DDRD=0x00;
000080 e0e0      	LDI  R30,LOW(0)
000081 bbe1      	OUT  0x11,R30
                 ; 0000 002A     number= PINA;
000082 b329      	IN   R18,25
000083 2733      	CLR  R19
                 ; 0000 002B     temp = number * 10;
                +
000084 e0aa     +LDI R26 , 10
000085 9fa2     +MUL R26 , R18
000086 01f0     +MOVW R30 , R0
000087 9fa3     +MUL R26 , R19
000088 0df0     +ADD R31 , R0
                 	__MULBNWRU 18,19,10
000089 01af      	MOVW R20,R30
                 ; 0000 002C 
                 ; 0000 002D     number_tmp = temp;
                +
00008a 834e     +STD Y + 6 , R20
00008b 835f     +STD Y + 6 + 1 , R21
                 	__PUTWSR 20,21,6
                 ; 0000 002E     decimal_tmp = number_tmp % 10;
00008c d0b0      	RCALL SUBOPT_0x0
00008d 940e 01b0 	CALL __MODW21U
00008f 87e8      	STD  Y+8,R30
000090 87f9      	STD  Y+8+1,R31
                 ; 0000 002F     number_tmp = number_tmp / 10;
000091 d0ab      	RCALL SUBOPT_0x0
000092 d0af      	RCALL SUBOPT_0x1
                 ; 0000 0030     yekan_tmp = number_tmp % 10;
000093 940e 01b0 	CALL __MODW21U
000095 87ea      	STD  Y+10,R30
000096 87fb      	STD  Y+10+1,R31
                 ; 0000 0031     number_tmp = number_tmp / 10;
000097 d0a5      	RCALL SUBOPT_0x0
000098 d0a9      	RCALL SUBOPT_0x1
                 ; 0000 0032     dahghan_tmp = number_tmp % 10;
000099 940e 01b0 	CALL __MODW21U
00009b 87ec      	STD  Y+12,R30
00009c 87fd      	STD  Y+12+1,R31
                 ; 0000 0033     number_tmp = number_tmp / 10;
00009d d09f      	RCALL SUBOPT_0x0
00009e d0a3      	RCALL SUBOPT_0x1
                 ; 0000 0034     sadghan_tmp = number_tmp % 10;
00009f 940e 01b0 	CALL __MODW21U
0000a1 87ee      	STD  Y+14,R30
0000a2 87ff      	STD  Y+14+1,R31
                 ; 0000 0035 
                 ; 0000 0036     while(number > 0){
                 _0x9:
0000a3 2400      	CLR  R0
0000a4 1602      	CP   R0,R18
0000a5 0603      	CPC  R0,R19
0000a6 f008      	BRLO PC+2
0000a7 c091      	RJMP _0xB
                 ; 0000 0037         number = temp;
0000a8 019a      	MOVW R18,R20
                 ; 0000 0038         if(number >= 1000){
                +
0000a9 3e28     +CPI R18 , LOW ( 1000 )
0000aa e0e3     +LDI R30 , HIGH ( 1000 )
0000ab 073e     +CPC R19 , R30
                 	__CPWRN 18,19,1000
0000ac f078      	BRLO _0xC
                 ; 0000 0039             decimal = number % 10;
0000ad d099      	RCALL SUBOPT_0x2
0000ae d09e      	RCALL SUBOPT_0x3
                 ; 0000 003A             number = number / 10;
                 ; 0000 003B             yekan = number % 10;
0000af d0a6      	RCALL SUBOPT_0x4
                 ; 0000 003C             number = number / 10;
                 ; 0000 003D             dahghan = number % 10;
0000b0 8bec      	STD  Y+20,R30
0000b1 8bfd      	STD  Y+20+1,R31
                 ; 0000 003E             number = number / 10;
0000b2 01d9      	MOVW R26,R18
0000b3 e0ea      	LDI  R30,LOW(10)
0000b4 e0f0      	LDI  R31,HIGH(10)
0000b5 940e 019d 	CALL __DIVW21U
0000b7 019f      	MOVW R18,R30
                 ; 0000 003F             sadghan = number % 10;
0000b8 d08e      	RCALL SUBOPT_0x2
0000b9 8bee      	STD  Y+22,R30
0000ba 8bff      	STD  Y+22+1,R31
                 ; 0000 0040         }
                 ; 0000 0041         else if(number >=100) {
0000bb c01f      	RJMP _0xD
                 _0xC:
                +
0000bc 3624     +CPI R18 , LOW ( 100 )
0000bd e0e0     +LDI R30 , HIGH ( 100 )
0000be 073e     +CPC R19 , R30
                 	__CPWRN 18,19,100
0000bf f030      	BRLO _0xE
                 ; 0000 0042             decimal = number % 10;
0000c0 d086      	RCALL SUBOPT_0x2
0000c1 d08b      	RCALL SUBOPT_0x3
                 ; 0000 0043             number = number / 10;
                 ; 0000 0044             yekan = number % 10;
0000c2 d093      	RCALL SUBOPT_0x4
                 ; 0000 0045             number = number / 10;
                 ; 0000 0046             dahghan = number % 10;
0000c3 8bec      	STD  Y+20,R30
0000c4 8bfd      	STD  Y+20+1,R31
                 ; 0000 0047             sadghan = 0;
0000c5 c012      	RJMP _0x2B
                 ; 0000 0048         }
                 ; 0000 0049         else if(number >= 10){
                 _0xE:
                +
0000c6 302a     +CPI R18 , LOW ( 10 )
0000c7 e0e0     +LDI R30 , HIGH ( 10 )
0000c8 073e     +CPC R19 , R30
                 	__CPWRN 18,19,10
0000c9 f028      	BRLO _0x10
                 ; 0000 004A             decimal = number % 10;
0000ca d07c      	RCALL SUBOPT_0x2
0000cb d081      	RCALL SUBOPT_0x3
                 ; 0000 004B             number = number / 10;
                 ; 0000 004C             yekan = number % 10;
0000cc 8bea      	STD  Y+18,R30
0000cd 8bfb      	STD  Y+18+1,R31
                 ; 0000 004D             dahghan = 0;
0000ce c006      	RJMP _0x2C
                 ; 0000 004E             sadghan = 0;
                 ; 0000 004F         }
                 ; 0000 0050         else{
                 _0x10:
                 ; 0000 0051             decimal = number % 10;
0000cf d077      	RCALL SUBOPT_0x2
0000d0 8be8      	STD  Y+16,R30
0000d1 8bf9      	STD  Y+16+1,R31
                 ; 0000 0052             yekan = 0;
0000d2 e0e0      	LDI  R30,LOW(0)
0000d3 8bea      	STD  Y+18,R30
0000d4 8beb      	STD  Y+18+1,R30
                 ; 0000 0053             dahghan = 0;
                 _0x2C:
0000d5 e0e0      	LDI  R30,LOW(0)
0000d6 8bec      	STD  Y+20,R30
0000d7 8bed      	STD  Y+20+1,R30
                 ; 0000 0054             sadghan = 0;
                 _0x2B:
0000d8 e0e0      	LDI  R30,LOW(0)
0000d9 8bee      	STD  Y+22,R30
0000da 8bef      	STD  Y+22+1,R30
                 ; 0000 0055 
                 ; 0000 0056         }
                 _0xD:
                 ; 0000 0057 
                 ; 0000 0058         for(i = 0; i < 25; i = i + 1)
                +
0000db e000     +LDI R16 , LOW ( 0 )
0000dc e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x13:
                +
0000dd 3109     +CPI R16 , LOW ( 25 )
0000de e0e0     +LDI R30 , HIGH ( 25 )
0000df 071e     +CPC R17 , R30
                 	__CPWRN 16,17,25
0000e0 f4f8      	BRSH _0x14
                 ; 0000 0059         {
                 ; 0000 005A             DDRD.3 = 1;
0000e1 9a8b      	SBI  0x11,3
                 ; 0000 005B             PORTC = array[decimal];
0000e2 89e8      	LDD  R30,Y+16
0000e3 89f9      	LDD  R31,Y+16+1
0000e4 d07a      	RCALL SUBOPT_0x5
                 ; 0000 005C             delay_ms(1);
                 ; 0000 005D 
                 ; 0000 005E             DDRD.3 = 0;
0000e5 988b      	CBI  0x11,3
                 ; 0000 005F             DDRD.2 = 1;
0000e6 9a8a      	SBI  0x11,2
                 ; 0000 0060             PORTC = array[yekan] + 0b10000000;
0000e7 89ea      	LDD  R30,Y+18
0000e8 89fb      	LDD  R31,Y+18+1
0000e9 5ae0      	SUBI R30,LOW(-_array)
0000ea 4ffe      	SBCI R31,HIGH(-_array)
0000eb 81e0      	LD   R30,Z
0000ec 58e0      	SUBI R30,-LOW(128)
0000ed bbe5      	OUT  0x15,R30
                 ; 0000 0061             delay_ms(1);
0000ee e0a1      	LDI  R26,LOW(1)
0000ef e0b0      	LDI  R27,0
0000f0 940e 0185 	CALL _delay_ms
                 ; 0000 0062 
                 ; 0000 0063             DDRD.2 = 0;
0000f2 988a      	CBI  0x11,2
                 ; 0000 0064             DDRD.1 = 1;
0000f3 9a89      	SBI  0x11,1
                 ; 0000 0065             PORTC = array[dahghan];
0000f4 89ec      	LDD  R30,Y+20
0000f5 89fd      	LDD  R31,Y+20+1
0000f6 d068      	RCALL SUBOPT_0x5
                 ; 0000 0066             delay_ms(1);
                 ; 0000 0067 
                 ; 0000 0068             DDRD.1 = 0;
0000f7 9889      	CBI  0x11,1
                 ; 0000 0069             DDRD.0 = 1;
0000f8 9a88      	SBI  0x11,0
                 ; 0000 006A             PORTC = array[sadghan];
0000f9 89ee      	LDD  R30,Y+22
0000fa 89ff      	LDD  R31,Y+22+1
0000fb d063      	RCALL SUBOPT_0x5
                 ; 0000 006B             delay_ms(1);
                 ; 0000 006C             DDRD.0 = 0;
0000fc 9888      	CBI  0x11,0
                 ; 0000 006D         }
                +
0000fd 5f0f     +SUBI R16 , LOW ( - 1 )
0000fe 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000ff cfdd      	RJMP _0x13
                 _0x14:
                 ; 0000 006E 
                 ; 0000 006F         DDRD.0 = 0;
000100 9888      	CBI  0x11,0
                 ; 0000 0070         temp = temp - 2;
                +
000101 5042     +SUBI R20 , LOW ( 2 )
000102 4050     +SBCI R21 , HIGH ( 2 )
                 	__SUBWRN 20,21,2
                 ; 0000 0071 
                 ; 0000 0072         if(PIND.7 == 0)
000103 9987      	SBIC 0x10,7
000104 c002      	RJMP _0x27
                 ; 0000 0073         {
                 ; 0000 0074             temp = sadghan_tmp * 1000 + dahghan * 100 + yekan * 10 + decimal - 2;
000105 d061      	RCALL SUBOPT_0x6
000106 d070      	RCALL SUBOPT_0x7
                 ; 0000 0075         }
                 ; 0000 0076         if(PIND.6 == 0)
                 _0x27:
000107 9986      	SBIC 0x10,6
000108 c010      	RJMP _0x28
                 ; 0000 0077         {
                 ; 0000 0078             temp = sadghan * 1000 + dahghan_tmp * 100 + yekan * 10 + decimal - 2;
000109 89ee      	LDD  R30,Y+22
00010a 89ff      	LDD  R31,Y+22+1
00010b eea8      	LDI  R26,LOW(1000)
00010c e0b3      	LDI  R27,HIGH(1000)
00010d 940e 018f 	CALL __MULW12U
                +
00010f 2f7e     +MOV R23 , R30
000110 2f8f     +MOV R24 , R31
                 	__PUTW1R 23,24
000111 85ac      	LDD  R26,Y+12
000112 85bd      	LDD  R27,Y+12+1
000113 e6e4      	LDI  R30,LOW(100)
000114 940e 0197 	CALL __MULB1W2U
                +
000116 0f7e     +ADD R23 , R30
000117 1f8f     +ADC R24 , R31
                 	__ADDWRR 23,24,30,31
000118 d05e      	RCALL SUBOPT_0x7
                 ; 0000 0079         }
                 ; 0000 007A         if(PIND.5 == 0)
                 _0x28:
000119 9985      	SBIC 0x10,5
00011a c00e      	RJMP _0x29
                 ; 0000 007B         {
                 ; 0000 007C             temp = sadghan_tmp * 1000 + dahghan * 100 + yekan_tmp * 10 + decimal - 2;
00011b d04b      	RCALL SUBOPT_0x6
00011c 85aa      	LDD  R26,Y+10
00011d 85bb      	LDD  R27,Y+10+1
00011e e0ea      	LDI  R30,LOW(10)
00011f 940e 0197 	CALL __MULB1W2U
000121 0fe7      	ADD  R30,R23
000122 1ff8      	ADC  R31,R24
000123 89a8      	LDD  R26,Y+16
000124 89b9      	LDD  R27,Y+16+1
000125 0fae      	ADD  R26,R30
000126 1fbf      	ADC  R27,R31
000127 9712      	SBIW R26,2
000128 01ad      	MOVW R20,R26
                 ; 0000 007D         }
                 ; 0000 007E         if(PIND.4 == 0)
                 _0x29:
000129 9984      	SBIC 0x10,4
00012a c00d      	RJMP _0x2A
                 ; 0000 007F         {
                 ; 0000 0080             temp = sadghan_tmp * 1000 + dahghan * 100 + yekan * 10 + decimal_tmp;
00012b d03b      	RCALL SUBOPT_0x6
00012c 89aa      	LDD  R26,Y+18
00012d 89bb      	LDD  R27,Y+18+1
00012e e0ea      	LDI  R30,LOW(10)
00012f 940e 0197 	CALL __MULB1W2U
000131 0fe7      	ADD  R30,R23
000132 1ff8      	ADC  R31,R24
000133 85a8      	LDD  R26,Y+8
000134 85b9      	LDD  R27,Y+8+1
000135 0fea      	ADD  R30,R26
000136 1ffb      	ADC  R31,R27
000137 01af      	MOVW R20,R30
                 ; 0000 0081         }
                 ; 0000 0082     }
                 _0x2A:
000138 cf6a      	RJMP _0x9
                 _0xB:
                 ; 0000 0083 
                 ; 0000 0084 }
000139 940e 01ba 	CALL __LOADLOCR6
00013b 9668      	ADIW R28,24
00013c 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _array:
000160           	.BYTE 0xA
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x0:
00013d 81ae      	LDD  R26,Y+6
00013e 81bf      	LDD  R27,Y+6+1
00013f e0ea      	LDI  R30,LOW(10)
000140 e0f0      	LDI  R31,HIGH(10)
000141 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
000142 940e 019d 	CALL __DIVW21U
000144 83ee      	STD  Y+6,R30
000145 83ff      	STD  Y+6+1,R31
000146 cff6      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:24 WORDS
                 SUBOPT_0x2:
000147 01d9      	MOVW R26,R18
000148 e0ea      	LDI  R30,LOW(10)
000149 e0f0      	LDI  R31,HIGH(10)
00014a 940e 01b0 	CALL __MODW21U
00014c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
00014d 8be8      	STD  Y+16,R30
00014e 8bf9      	STD  Y+16+1,R31
00014f 01d9      	MOVW R26,R18
000150 e0ea      	LDI  R30,LOW(10)
000151 e0f0      	LDI  R31,HIGH(10)
000152 940e 019d 	CALL __DIVW21U
000154 019f      	MOVW R18,R30
000155 cff1      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
000156 8bea      	STD  Y+18,R30
000157 8bfb      	STD  Y+18+1,R31
000158 01d9      	MOVW R26,R18
000159 e0ea      	LDI  R30,LOW(10)
00015a e0f0      	LDI  R31,HIGH(10)
00015b 940e 019d 	CALL __DIVW21U
00015d 019f      	MOVW R18,R30
00015e cfe8      	RJMP SUBOPT_0x2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
00015f 5ae0      	SUBI R30,LOW(-_array)
000160 4ffe      	SBCI R31,HIGH(-_array)
000161 81e0      	LD   R30,Z
000162 bbe5      	OUT  0x15,R30
000163 e0a1      	LDI  R26,LOW(1)
000164 e0b0      	LDI  R27,0
000165 940c 0185 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x6:
000167 85ee      	LDD  R30,Y+14
000168 85ff      	LDD  R31,Y+14+1
000169 eea8      	LDI  R26,LOW(1000)
00016a e0b3      	LDI  R27,HIGH(1000)
00016b 940e 018f 	CALL __MULW12U
                +
00016d 2f7e     +MOV R23 , R30
00016e 2f8f     +MOV R24 , R31
                 	__PUTW1R 23,24
00016f 89ac      	LDD  R26,Y+20
000170 89bd      	LDD  R27,Y+20+1
000171 e6e4      	LDI  R30,LOW(100)
000172 940e 0197 	CALL __MULB1W2U
                +
000174 0f7e     +ADD R23 , R30
000175 1f8f     +ADC R24 , R31
                 	__ADDWRR 23,24,30,31
000176 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x7:
000177 89aa      	LDD  R26,Y+18
000178 89bb      	LDD  R27,Y+18+1
000179 e0ea      	LDI  R30,LOW(10)
00017a 940e 0197 	CALL __MULB1W2U
00017c 0fe7      	ADD  R30,R23
00017d 1ff8      	ADC  R31,R24
00017e 89a8      	LDD  R26,Y+16
00017f 89b9      	LDD  R27,Y+16+1
000180 0fae      	ADD  R26,R30
000181 1fbf      	ADC  R27,R31
000182 9712      	SBIW R26,2
000183 01ad      	MOVW R20,R26
000184 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000185 9610      	adiw r26,0
000186 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000187 ed80     +LDI R24 , LOW ( 0x7D0 )
000188 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000189 9701     +SBIW R24 , 1
00018a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00018b 95a8      	wdr
00018c 9711      	sbiw r26,1
00018d f7c9      	brne __delay_ms0
                 __delay_ms1:
00018e 9508      	ret
                 
                 __MULW12U:
00018f 9ffa      	MUL  R31,R26
000190 2df0      	MOV  R31,R0
000191 9feb      	MUL  R30,R27
000192 0df0      	ADD  R31,R0
000193 9fea      	MUL  R30,R26
000194 2de0      	MOV  R30,R0
000195 0df1      	ADD  R31,R1
000196 9508      	RET
                 
                 __MULB1W2U:
000197 2f6e      	MOV  R22,R30
000198 9f6a      	MUL  R22,R26
000199 01f0      	MOVW R30,R0
00019a 9f6b      	MUL  R22,R27
00019b 0df0      	ADD  R31,R0
00019c 9508      	RET
                 
                 __DIVW21U:
00019d 2400      	CLR  R0
00019e 2411      	CLR  R1
00019f e190      	LDI  R25,16
                 __DIVW21U1:
0001a0 0faa      	LSL  R26
0001a1 1fbb      	ROL  R27
0001a2 1c00      	ROL  R0
0001a3 1c11      	ROL  R1
0001a4 1a0e      	SUB  R0,R30
0001a5 0a1f      	SBC  R1,R31
0001a6 f418      	BRCC __DIVW21U2
0001a7 0e0e      	ADD  R0,R30
0001a8 1e1f      	ADC  R1,R31
0001a9 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001aa 60a1      	SBR  R26,1
                 __DIVW21U3:
0001ab 959a      	DEC  R25
0001ac f799      	BRNE __DIVW21U1
0001ad 01fd      	MOVW R30,R26
0001ae 01d0      	MOVW R26,R0
0001af 9508      	RET
                 
                 __MODW21U:
0001b0 dfec      	RCALL __DIVW21U
0001b1 01fd      	MOVW R30,R26
0001b2 9508      	RET
                 
                 __SAVELOCR6:
0001b3 935a      	ST   -Y,R21
                 __SAVELOCR5:
0001b4 934a      	ST   -Y,R20
                 __SAVELOCR4:
0001b5 933a      	ST   -Y,R19
                 __SAVELOCR3:
0001b6 932a      	ST   -Y,R18
                 __SAVELOCR2:
0001b7 931a      	ST   -Y,R17
0001b8 930a      	ST   -Y,R16
0001b9 9508      	RET
                 
                 __LOADLOCR6:
0001ba 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0001bb 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0001bc 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0001bd 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0001be 8119      	LDD  R17,Y+1
0001bf 8108      	LD   R16,Y
0001c0 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
0001c1 0fac      	ADD  R26,R28
0001c2 1fbd      	ADC  R27,R29
                 __INITLOC0:
0001c3 9005      	LPM  R0,Z+
0001c4 920d      	ST   X+,R0
0001c5 958a      	DEC  R24
0001c6 f7e1      	BRNE __INITLOC0
0001c7 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  21 r1 :   6 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   6 r17:   6 r18:  17 r19:   9 r20:  10 r21:   5 r22:   5 r23:   7 
r24:  18 r25:   5 r26:  42 r27:  23 r28:   4 r29:   2 r30:  98 r31:  47 
x  :   4 y  :  74 z  :  10 
Registers used: 21 out of 35 (60.0%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  10 add   :  14 
adiw  :   2 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   2 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   4 
brlt  :   0 brmi  :   0 brne  :   7 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  20 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   6 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   1 cpc   :   5 cpi   :   4 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   1 inc   :   0 jmp   :  23 ld    :   3 ldd   :  35 ldi   :  62 
lds   :   0 lpm   :   8 lsl   :   1 lsr   :   0 mov   :   7 movw  :  20 
mul   :   7 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  11 pop   :   0 push  :   0 rcall :  27 ret   :  13 
reti  :   0 rjmp  :  17 rol   :   3 ror   :   0 sbc   :   1 sbci  :   4 
sbi   :   4 sbic  :   4 sbis  :   0 sbiw  :   8 sbr   :   1 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  10 std   :  32 sts   :   0 sub   :   1 subi  :   5 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 42 out of 116 (36.2%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000390    876     36    912   16384   5.6%
[.dseg] 0x000060 0x00016a      0     10     10    1024   1.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
